// Code generated by go-bindata.
// sources:
// builtin_models/MobileNet_SSD_Lite_v2.0.yml
// builtin_models/MobileNetv1_SSD.yml
// builtin_models/OnnxVision_Mask_RCNN_R_50_FPN.yml
// builtin_models/OnnxVision_SSD.yml
// builtin_models/TorchVision_AlexNet.yml
// builtin_models/TorchVision_DeepLabv3_Resnet101.yml
// builtin_models/TorchVision_FCN_Resnet101.yml
// DO NOT EDIT!

package onnxruntime

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mobilenet_ssd_lite_v20Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x5f\x8f\xdb\x38\x0e\x7f\xcf\xa7\x20\x90\x97\x16\x98\xd8\x49\x9c\xa6\x13\x03\x77\x0f\x37\x07\xdc\x1c\x70\x37\x07\xb4\x07\x14\x8b\xa2\x30\x68\x99\xb6\xb5\x95\x25\xad\x44\x67\x32\xfd\xf4\x0b\x49\x4e\xe2\xe9\xcc\x2e\x5a\x6c\x1e\x0c\x87\x7f\x7e\xa4\x48\xfe\x44\x6b\x1c\xa8\x84\xff\x9a\x5a\x2a\x7a\x20\xae\x3e\x7e\xfc\x67\xf5\x1f\xc9\x54\x1d\xb7\xd9\x1a\x96\x10\xf4\x60\x5a\x78\x32\xa3\x83\xc1\x34\xa4\x16\xad\xc3\x81\x1e\x8d\xfb\x5a\x2e\x00\x00\x12\xc2\xff\xb4\x3e\xb9\x51\xb3\x1c\x08\x96\x70\x31\x81\xd6\x38\xe0\x9e\x26\xd7\x60\x7f\x24\xe7\xa5\xd1\x25\x6c\xb2\x22\xdb\x3c\x33\x9e\x54\x20\x8c\xf6\xec\x50\x6a\x5e\xcc\xac\x43\x3a\x67\x0b\xa9\x5b\xe3\x06\xe4\xf4\x0e\x9e\x06\xd4\x2c\xc5\x45\x9f\xb4\x0b\x61\x34\xa3\xd4\xe4\x4a\x58\xc2\xe5\x8f\x87\xd1\x53\x03\x6c\xc0\x92\x0b\x96\x29\x3b\xb0\x8e\x1a\x29\x02\x66\x4c\x74\x09\xc3\xa8\x58\x5a\x45\x60\x15\x72\x30\xf4\x20\x50\x43\x4d\xe0\x2d\x09\xd9\x4a\x6a\xa2\x25\x0e\xcd\x7e\x97\xaa\x11\x7e\xc2\x8e\x25\x38\x94\xd6\x99\x5f\x49\x70\x2e\xd0\x0d\x6a\x65\xae\x15\x2a\xa3\xc3\x4a\xd8\xf1\xe2\xd3\xfd\xa0\x4f\x37\xf9\x58\x2b\xf6\x3b\x45\x3f\x13\x74\x72\xb9\x40\xfc\x58\xd8\xb9\x57\x43\x5e\x38\x69\x39\x36\xe4\xef\x11\xe4\xff\xbd\xf4\x53\xf9\xa4\x07\x04\x47\x56\x49\x91\x1a\x63\xda\x6b\xeb\x21\xf9\xd6\xd4\x84\x7e\x05\xf1\x65\xe6\xc0\x8e\xf5\xd9\x27\x9b\x03\xd2\xc9\x92\x60\x0f\x83\xd4\x72\x55\x23\x8b\x9e\x7c\x00\x2d\x56\xa2\x47\xad\x49\xc1\x87\x7f\xfd\x03\xe4\x80\x5d\x92\xfb\x1e\x2d\xc1\x9b\x02\x4e\x70\x0f\x27\xf8\xf4\xf6\x06\x1e\x7b\x72\x04\xf7\x80\xba\x81\x4f\x80\x8e\x26\xd0\xd4\xfe\x9a\x00\x19\x14\xa1\x67\x28\xd6\xeb\x10\x9c\xce\x78\x3d\x1e\x69\xb2\x51\x06\x9b\x29\x6f\x13\x8e\x88\xba\x8b\x9c\xf8\xbc\xbe\x81\xed\xbb\x77\x5f\x22\x3a\xf7\xa4\x41\x87\xb1\x53\xf2\x1b\x35\x30\x7a\xa9\x3b\x18\x08\x35\xfc\x0d\x3e\x6f\xb6\xef\x6f\xe0\xfc\x48\x0e\x9e\x9b\xa4\xb9\x0d\xc2\xf4\xf8\xb2\x70\xd4\x92\x23\x2d\xc8\x87\x91\xbd\xfe\x8b\xd3\x8a\x36\x0c\x6f\x0e\x8f\x54\x7b\xc9\x14\x5e\x89\x45\x96\x9d\x8b\x1b\x22\x3e\x27\xdb\x0a\x7a\x66\xeb\xcb\x3c\xef\x24\xf7\x63\x9d\x09\x33\xe4\xbf\xb5\x1d\x9a\x1e\x4d\x6e\x9f\xd8\x38\xd1\xaf\xbc\x6f\xf2\x5a\x99\x3a\x1f\xd0\x33\xb9\xfc\x28\x03\x89\x72\xad\xf3\x21\x36\x49\x13\x67\xf6\xe9\xaf\x03\x06\xf1\x05\xb1\x3a\x6e\x2b\xef\x9b\x4a\x49\xa6\x97\xe8\x9e\x8d\xc3\x8e\xb2\xce\x98\x4e\x11\x5a\xe9\x63\xa4\x78\x32\xbf\x0a\xb1\x86\x7a\x1b\xe2\xac\x82\xff\x6a\xb0\xab\x75\xb5\xbf\xdd\x67\x96\xfb\xef\x90\xd0\x9d\xe4\x31\x33\xae\xcb\x6d\xd3\xe6\x9b\xf7\xeb\x5d\xb6\xde\xdd\xee\x37\x99\x6d\xda\xc5\x12\x94\x14\xa4\x3d\x3d\x1b\xd6\xc5\x24\x2c\x61\xd4\x8e\x3c\x3b\x19\x26\x66\xb1\x04\xa9\xed\xc8\xb1\x17\x57\xdb\x24\x2b\xa7\x2b\xa3\x95\xce\x73\xb2\x03\x7e\xb2\xf4\xca\x05\xb8\x8a\x8a\x32\x0d\xda\xc4\xc4\x25\xcc\xb8\x75\xce\x65\x86\x35\x99\x3d\x23\x60\x30\x49\x81\xe6\x48\x16\xc3\x75\xca\xe4\xe2\x00\xc5\x14\xae\xa2\x0b\xef\x01\x48\xd1\x40\x9a\xab\x94\x4b\xab\x0c\x72\xb1\x9d\xe9\x23\x72\xa5\xf0\x29\x5c\x9e\xeb\x99\x42\xe1\x93\x19\xb9\x84\xbb\xfb\x4f\x33\xa9\x30\xca\xb8\x2a\x1c\xb2\x0c\xac\x9c\x69\x1a\x39\x90\x0e\xed\xf7\x25\x7c\x2e\x6e\x02\xd1\xe2\xe3\xcb\xcc\x26\xd0\xa4\xfc\x9e\x25\x33\xbd\x17\xa8\xa8\x0c\x0c\x59\x98\x91\xed\xc8\xe7\x72\x87\x1a\xc4\x33\x4e\x25\x4b\xda\xa8\x4c\x07\xab\xcd\xa8\x1b\xa9\xbb\xda\x9c\x26\x17\x7c\xad\xd4\xc9\xef\x5a\xa9\xc5\xab\xd5\x9e\xac\xce\x98\x50\x9b\xd3\x4f\x01\xce\x7a\x73\x39\xdc\x1f\xf7\xe8\xcf\x3b\x24\x14\x7a\x4f\xfe\x65\x87\x6a\x73\xba\x8a\x37\x17\xb1\x75\xa6\xc6\x5a\x2a\xc9\xf2\x35\xaf\x96\x90\x47\x47\xbe\x1a\x9d\x2a\xaf\x2c\x2c\x32\x1c\xf0\x9b\xd1\xf8\x98\xf8\x17\x68\x49\x59\xdc\x12\x91\x52\x89\x8f\x39\x93\xf6\xc6\xb5\xca\x3c\x9e\x25\x0d\x91\x55\x58\x1f\x8b\x6a\xd0\xc7\x6d\x65\x31\xb4\xb0\x8a\x4b\xbd\xc2\xb1\xab\xb6\xeb\xcd\x6d\xb5\xde\x54\xdb\x43\x9e\x74\xab\xa3\x11\xab\xe9\x50\x19\x9f\xf8\x65\x66\xa2\x27\xf1\xd5\x8f\x43\x09\x07\x41\xbb\xe2\x50\x8b\xb6\xde\xed\x44\xb1\xde\xd1\xee\x80\xeb\x96\x36\x48\xc5\xe1\xb6\xdd\x1f\x16\x31\x89\x30\xff\xe7\x3d\x7d\x5e\x29\x9d\x43\xdb\xc7\xeb\xf7\x91\x64\xd7\xb3\x07\x47\xde\x8c\x4e\x50\xaa\x7b\xd4\x57\x16\xb9\xff\xf9\x22\xcc\xb6\xe6\xb3\xcb\x29\x0b\x8a\x88\x2e\x7d\x85\x4e\xf4\xf2\x38\xdb\xdb\x2d\x2a\x1f\x3e\x99\x64\x0b\x9e\xf8\x26\xed\x91\x30\x41\x35\x7a\x0a\xdd\x48\x7b\x35\xbc\x84\xed\xa3\x61\x42\x98\x0f\x50\x4f\xb3\xc4\xe7\xa7\x4b\x82\x08\xd9\x90\x36\x4c\xe1\x7d\xe6\xd9\x4a\x45\xf1\x03\xce\x9f\xe7\xf6\x65\x81\x1e\x25\xf7\xd3\xca\x9e\x87\x4e\x01\xaf\x3d\x41\x51\x14\x87\x77\x87\xb6\x78\xbf\x21\xa4\x66\x53\xd3\xed\x7e\xbf\x3b\x1c\xb0\x2d\xea\xed\xed\x61\xb7\x40\x66\x27\xeb\x91\xd3\x66\xa3\x13\x3b\x04\x4d\x1c\x3f\xfc\xae\xba\x88\xfd\x55\xea\xa6\x84\xbb\x87\x87\xe9\x70\xe1\x7f\x48\x50\xd3\xe8\x50\x5d\xbc\xde\xdc\x3d\x3c\xdc\xc0\x87\xf0\xc8\xb2\xec\x6d\x62\x7d\x98\x30\xa9\xbb\xaa\x41\x46\x4f\x5c\xc2\xbf\xc3\xe5\x18\x3e\x33\x96\x30\xc9\x2e\x9f\x7f\xf1\x6e\x9e\x1c\xa2\xf7\x80\x5a\xb6\xe4\xb9\xc2\x91\x7b\xe3\x4a\xf8\x85\xf4\xea\xde\x4b\xd4\x1d\xdc\xf5\xa8\xbb\xdf\x03\x00\x00\xff\xff\xe6\x2a\x0b\x71\x2f\x0b\x00\x00"

func mobilenet_ssd_lite_v20YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_ssd_lite_v20Yml,
		"MobileNet_SSD_Lite_v2.0.yml",
	)
}

func mobilenet_ssd_lite_v20Yml() (*asset, error) {
	bytes, err := mobilenet_ssd_lite_v20YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_SSD_Lite_v2.0.yml", size: 2863, mode: os.FileMode(420), modTime: time.Unix(1595105405, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mobilenetv1_ssdYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x5f\x8f\xdb\x38\x0e\x7f\xcf\xa7\x20\x90\x97\x16\x98\xd8\x71\x92\xf9\x13\x03\x77\x0f\x37\x07\xdc\xdc\xc3\xcd\x01\xed\x02\xc5\xa2\x28\x0c\x5a\xa6\x6d\x6d\x65\x49\x2b\xd1\x99\x4c\x3f\xfd\x42\x92\x93\x78\x3a\xb3\x8b\x16\x9b\x07\xc3\xe1\x9f\x1f\x29\x92\x3f\xd1\x1a\x07\x2a\xe1\x7f\xa6\x96\x8a\x1e\x89\xab\x8f\x1f\xff\x5d\x1d\x8a\x6c\x0d\x4b\x08\x2a\x30\x2d\x3c\x9b\xd1\xc1\x60\x1a\x52\x8b\xd6\xe1\x40\x4f\xc6\x7d\x2d\x17\x00\x00\xc9\xf9\xff\x5a\x1f\xdd\xa8\x59\x0e\x04\x4b\x38\x9b\x40\x6b\x1c\x70\x4f\x93\x6b\xb0\x3f\x90\xf3\xd2\xe8\x12\x8a\x6c\x9b\x15\x2f\x8c\x27\x15\x08\xa3\x3d\x3b\x94\x9a\x17\x33\xeb\x90\xce\xc9\x42\xea\xd6\xb8\x01\x39\xbd\x83\xa7\x01\x35\x4b\x71\xd6\x27\xed\x42\x18\xcd\x28\x35\xb9\x12\x96\x70\xfe\xe3\x61\xf4\xd4\x00\x1b\xb0\xe4\x82\x65\xca\x0e\xac\xa3\x46\x8a\x80\x19\x13\x5d\xc2\x30\x2a\x96\x56\x11\x58\x85\x1c\x0c\x3d\x08\xd4\x50\x13\x78\x4b\x42\xb6\x92\x9a\x68\x89\x43\x73\xb3\x4b\xd5\x08\x3f\x61\xc7\x12\x1c\x4a\xeb\xcc\x6f\x24\x38\x17\xe8\x06\xb5\x32\x97\x0a\x95\xd1\x61\x25\xec\x78\xf6\xe9\x7e\xd0\xa7\x9b\x7c\xac\x15\x37\x3b\x45\x3f\x13\x74\x72\x39\x43\xfc\x58\xd8\xb9\x57\x43\x5e\x38\x69\x39\x36\xe4\x9f\x11\xe4\x97\x5e\xfa\xa9\x7c\xd2\x03\x82\x23\xab\xa4\x48\x8d\x31\xed\xa5\xf5\x90\x7c\x6b\x6a\x42\xbf\x82\xf8\x3c\x6e\x60\xc7\xfa\xe4\x93\xcd\x01\xe9\x68\x49\xb0\x87\x41\x6a\xb9\xaa\x91\x45\x4f\x3e\x80\x6e\x57\xa2\x47\xad\x49\xc1\x87\xff\xfc\x0b\xe4\x80\x5d\x92\xfb\x1e\x2d\xc1\xbb\x2d\x1c\xe1\x01\x8e\xf0\xe9\xfd\x15\x3c\xf5\xe4\x08\x1e\x00\x75\x03\x9f\x00\x1d\x4d\xa0\xa9\xfd\x35\x01\x32\x28\x42\xcf\xb0\x5d\xaf\x43\x70\x3a\xe1\xf5\x78\xa0\xc9\x46\x19\x6c\xa6\xbc\x4d\x38\x22\xea\x2e\x72\xe2\xf3\xfa\x0a\x36\xd7\xd7\x5f\x22\x3a\xf7\xa4\x41\x87\xb1\x53\xf2\x1b\x35\x30\x7a\xa9\x3b\x18\x08\x35\xfc\x03\x3e\x17\x9b\xdb\x2b\x38\x3d\x92\x83\xe7\x26\x69\xee\x82\x30\x3d\xbe\x2c\x1c\xb5\xe4\x48\x0b\xf2\x61\x64\x2f\xff\xe2\xb4\xa2\x0d\xc3\x9b\xc3\x13\xd5\x5e\x32\x85\x57\x62\x91\x65\xa7\xe2\x86\x88\x2f\xc9\xb6\x82\x9e\xd9\xfa\x32\xcf\x3b\xc9\xfd\x58\x67\xc2\x0c\xf9\xef\x6d\x87\xa6\x47\x93\xdb\x67\x36\x4e\xf4\x2b\xef\x9b\xbc\x56\xa6\xce\x07\xf4\x4c\x2e\x3f\xc8\x40\xa2\x5c\xeb\x7c\x88\x4d\xd2\xc4\x99\x7d\xfe\xfb\x80\x41\x7c\x46\x3c\x14\x95\xf7\xcd\x6b\x5c\xcf\xc6\x61\x47\x59\x67\x4c\xa7\x08\xad\xf4\x31\x46\x3c\x93\x5f\x85\x28\x67\x88\xd5\xa1\x08\xa1\x56\x83\x5d\xad\xab\x9b\xdb\xeb\xcc\x72\xff\x1d\x1a\xba\xa3\x3c\x64\xc6\x75\xb9\x6d\xda\xbc\xb8\x5d\xef\xb2\xf5\xee\xee\xa6\xc8\x6c\xd3\x2e\x96\xa0\xa4\x20\xed\xe9\xc5\xa8\x2e\x26\x61\x09\xa3\x76\xe4\xd9\xc9\x30\x2f\x8b\x25\x48\x6d\x47\x8e\x9d\xb8\xd8\x26\x59\x39\x5d\x18\xad\x74\x9e\x93\x1d\xf0\xb3\xa5\x37\xae\xbf\x55\x54\x94\x69\xcc\x26\x1e\x2e\x61\xc6\xac\x53\x2e\x33\xac\xc9\xec\x05\xfd\x82\x49\x0a\x34\x47\xb2\x18\x2e\x53\x26\x17\xc7\x27\xa6\x70\x11\x9d\x59\x0f\x40\x8a\x06\xd2\x5c\xa5\x5c\x5a\x65\x90\xb7\x9b\x99\x3e\x22\x57\x0a\x9f\xc3\xd5\xb9\x9e\x29\x14\x3e\x9b\x91\x4b\xb8\x7f\xf8\x34\x93\x0a\xa3\x8c\xab\xc2\x21\xcb\xc0\xc9\x99\xa6\x91\x03\xe9\xd0\x7c\x5f\xc2\xe7\xed\x55\xa0\x59\x7c\x7c\x99\xd9\x04\x92\x94\xdf\x73\x64\xa6\xf7\x02\x15\x95\x81\x1f\x0b\x33\xb2\x1d\xf9\x54\xee\x50\x83\x78\xc6\xa9\x64\x49\x1b\x95\xe9\x60\xb5\x19\x75\x23\x75\x57\x9b\xe3\xe4\x82\x6f\x95\x3a\xf9\x5d\x2a\xb5\x78\xb3\xda\x93\xd5\x09\x13\x6a\x73\xfc\x29\xc0\x59\x6f\xce\x87\xfb\xf3\x1e\xfd\x75\x87\x84\x42\xef\xc9\xbf\xee\x50\x6d\x8e\x17\x71\x71\x16\x5b\x67\x6a\xac\xa5\x92\x2c\xdf\xf2\x6a\x09\x79\x74\xe4\xab\xd1\xa9\xf2\xc2\xc4\x6d\x86\x03\x7e\x33\x1a\x9f\x12\x07\x03\x35\x29\x8b\x3b\x22\x52\x2a\x71\x32\x67\xd2\xde\xb8\x56\x99\xa7\x93\xa4\x21\xb2\x0a\xeb\xc3\xb6\x1a\xf4\x61\x53\x59\x0c\x2d\xac\xe2\x4a\xaf\x70\xec\xaa\xcd\xba\xb8\xab\xd6\x45\xb5\xd9\xe7\x49\xb7\x3a\x18\xb1\x9a\x0e\x95\xf1\x91\x5f\x67\x26\x7a\x12\x5f\xfd\x38\x94\xb0\x17\xb4\xdb\xee\x6b\xd1\xd6\xbb\x9d\xd8\xae\x77\xb4\xdb\xe3\xba\xa5\x02\x69\xbb\xbf\x6b\x6f\xf6\x8b\x98\x44\x98\xff\xd3\x96\x3e\x2d\x94\xce\xa1\xed\xe3\xe5\xfb\x44\xb2\xeb\xd9\x83\x23\x6f\x46\x27\x28\xd5\x3d\xea\x2b\x8b\xdc\xff\x7c\x11\x66\x3b\x33\x1f\xea\x78\x2f\x65\x41\x16\x81\xa5\xaf\xd0\x89\x5e\x1e\x66\x0b\xbb\x45\xe5\xc3\xb7\x92\x6c\xc1\x13\x5f\xa5\x05\x12\x86\xa7\x46\x4f\xa1\x11\x69\xa1\x86\x97\xb0\x76\x34\x4c\x08\xf3\xd9\xe9\x69\x96\xf3\xfc\x60\x49\x10\x21\x1b\xd2\x86\x29\xbc\xcf\x3c\x5b\xa9\x28\x7e\xb9\xf9\xd3\xc8\xbe\xae\xcd\x93\xe4\x7e\xda\xd5\xf3\xd0\x29\xe0\xa5\x1d\xc5\x4d\xd3\xb6\x7b\x2a\x8a\x62\xbd\xdb\xb4\xfb\xbb\xa2\xde\x88\xf5\xf5\x4e\xdc\xb4\xb7\xbb\xf6\xee\xba\x5d\x20\xb3\x93\xf5\xc8\x69\xa5\xd1\x91\x1d\x82\x26\x8e\x5f\x7c\x17\x5d\xc4\xfe\x2a\x75\x53\xc2\xfd\xe3\xe3\x74\xb8\xf0\x3f\x24\xa8\x69\x74\xa8\xce\x5e\xef\xee\x1f\x1f\xaf\xe0\x43\x78\x64\x59\xf6\x3e\x11\x3e\x0c\x97\xd4\x5d\xd5\x20\xa3\x27\x2e\xe1\xbf\xe1\x5e\x0c\xdf\x17\x4b\x98\x64\xe7\xef\xbe\x78\x2d\x4f\x0e\xd1\x7b\x40\x2d\x5b\xf2\x5c\xe1\xc8\xbd\x71\x25\xfc\x4a\x7a\xf5\xe0\x25\xea\x0e\xee\x7b\xd4\xdd\x1f\x01\x00\x00\xff\xff\x88\x90\xec\xac\x23\x0b\x00\x00"

func mobilenetv1_ssdYmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenetv1_ssdYml,
		"MobileNetv1_SSD.yml",
	)
}

func mobilenetv1_ssdYml() (*asset, error) {
	bytes, err := mobilenetv1_ssdYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNetv1_SSD.yml", size: 2851, mode: os.FileMode(420), modTime: time.Unix(1595105403, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _onnxvision_mask_rcnn_r_50_fpnYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\xcd\x8e\xe3\x36\x0c\xbe\xe7\x29\x08\xe4\xd2\x02\x13\xc7\x9e\x24\x93\xc4\x40\x7b\xe8\x00\xed\x5e\x9a\x2d\x06\x45\x8b\x62\x51\x18\xb4\x4c\xdb\xea\xc8\x92\x21\xd1\x3b\x93\x7d\xfa\x42\x92\x63\x7b\x7f\x0e\x3b\x39\x18\x0e\xf9\x91\x14\xc9\x8f\x94\x35\x76\x94\xc3\x7b\xad\x5f\xff\x92\x4e\x1a\x5d\xfc\x8e\xee\xb9\x78\x7a\xbc\x5c\x8a\xa7\xe2\x90\x16\xbf\xfe\x71\x81\x35\x78\x14\x98\x1a\xae\x66\xb0\xd0\x99\x8a\xd4\xaa\xb6\xd8\xd1\x8b\xb1\xcf\xf9\x0a\x00\x60\xf6\x63\x07\xcd\xb2\x23\x58\xc3\x04\x81\xda\x58\xe0\x96\x46\x53\x8f\xff\x48\xd6\x87\xcb\x21\x4b\x76\x49\xf6\x19\x78\x54\x81\x30\xda\xb1\x45\xa9\x79\xb5\x40\xa7\xb0\x9e\x10\x52\xd7\xc6\x76\xc8\xf1\x1d\x1c\x75\xa8\x59\x8a\x49\x1f\xb5\x2b\x61\x34\xa3\xd4\x64\x73\x58\xc3\xf4\xc7\xc1\xe0\xa8\x02\x36\xd0\x93\xf5\xc8\x78\x3a\xe8\x2d\x55\x52\x78\x9f\xe1\xa0\x6b\xe8\x06\xc5\xb2\x57\x04\xbd\x42\xf6\x40\x07\x02\x35\x94\x04\xae\x27\x21\x6b\x49\x55\x40\x62\x57\x3d\xec\x63\x35\xfc\x4f\xf4\x43\x0e\x16\x65\x6f\xcd\x7f\x24\x78\x2b\xd0\x76\x6a\x63\xe6\x0a\xe5\xc1\x60\x23\xfa\x61\xb2\x69\xbe\xd3\xa6\x19\x6d\xfa\x5e\x3c\xec\x15\xbd\x25\xe8\x68\x32\xb9\xf8\xbe\xb0\x4b\xab\x8a\x9c\xb0\xb2\xe7\xd0\x90\x9f\x83\x93\x3f\x5b\xe9\xc6\xf2\x49\x07\x08\x96\x50\x6d\x02\x0b\x34\x0d\x16\x15\x68\xe2\x89\x08\xa6\xf4\x41\x40\x6a\xc7\xa8\x05\x81\xa3\xa6\x23\xcd\xb1\x8d\xdc\x22\x43\x45\x4c\x82\x1d\x9c\x52\xa8\x64\x5d\x93\x25\xcd\x20\x14\x3a\x47\x2e\xf9\x32\xa0\xd1\xea\x0a\xa8\x94\x79\x71\x50\x22\x8b\xd6\xc9\x4f\x04\x3f\x41\x06\x62\xb0\xde\x52\x5d\x93\x95\xa5\xe0\x45\x90\xf3\x1c\x98\xff\x85\xf6\x63\xef\xd9\xb0\x85\x17\x2a\x9d\x64\xf2\xaf\xc4\x22\x49\x20\x66\x5a\x4a\xdd\x7c\xc1\xde\x0d\xb4\xcc\xbd\xcb\xb7\xdb\x46\x72\x3b\x94\x89\x30\xdd\xd6\xd7\x6b\x1b\x30\x6e\xcb\x96\x68\xdb\xa1\x63\xb2\xdb\x8f\x61\xb0\xb6\x31\xed\x22\xe6\xe6\x27\x6d\x99\xb7\xc7\x3e\x6f\xac\xd0\x7a\xb5\x06\x25\x05\x69\x17\x06\x6e\x0e\x3b\x0a\x73\x18\xb4\x25\xc7\x56\x0a\xa6\x6a\xb5\x06\xa9\xfb\x81\x43\x1e\x33\x36\xca\xf2\x91\xbf\xb5\xb4\x8e\x23\x0e\xf8\xda\xd3\x37\xa6\x71\x13\x14\x39\xc8\x0e\x1b\x1a\x69\xb1\x86\x45\xa3\x6f\x67\x59\xf8\x1a\x61\x9f\xb1\xc1\x43\x62\xa0\xa5\xa7\x1e\xfd\x6c\x33\xd9\x50\xfc\x70\x84\x59\x34\x91\x10\x80\x14\xf9\x82\x14\xf1\x2c\xb5\x32\xc8\xbb\xfb\x85\x3e\x78\x2e\x14\x5e\xfd\x24\xa7\x0b\x85\xc2\xab\x19\x38\x87\xc7\x77\x7f\x2f\xa4\xc2\x28\x63\x0b\x9f\x64\x0e\xbf\xfc\xf6\xb4\xd0\x54\xb2\x23\xed\x9b\xe2\x72\xf8\xb0\xbb\x83\x53\x9a\x86\xc7\xbf\x0b\x4c\x47\xa8\x73\xf8\x90\xa5\xf7\xc9\xf9\x94\x66\x77\x90\x65\x87\xe4\xbc\x7f\x38\xdc\x41\x76\x7f\x9f\x1c\x8f\xd9\x71\x09\x77\x02\x15\xe5\x90\xad\xcc\xc0\xfd\xc0\xb7\xda\xfb\x82\x84\x84\xc7\xfa\x45\x6d\x50\xc6\x2c\x4b\x33\xe8\x4a\xea\xa6\x34\xaf\xa3\x09\x7e\xab\xee\xd1\x6e\x2e\xdb\xea\x9b\xa5\x1f\x51\x37\x9f\x50\x9a\xd7\x37\x39\x5c\x34\x6a\xde\x28\x71\xec\x6e\x65\xcf\x26\x45\x69\x5e\x67\xf1\xdc\x8d\xde\x9a\x12\x4b\xa9\x24\xcb\x59\x3d\x77\xd1\xf3\x7c\x12\xef\x26\x71\x4d\xc8\x83\x25\x57\x0c\x56\xe5\xd3\x70\xb9\x5d\x82\x1d\x7e\x32\x1a\x5f\x5c\x18\x31\xc7\xc6\x52\x12\xd6\x53\x62\x6c\xb3\x75\x57\xed\x88\xdd\x56\x18\x61\xc2\xa3\x50\x58\x92\x72\xc5\x7d\x9a\xed\xfd\xe3\x58\x94\x28\x9e\x1b\xeb\x2b\x92\xf0\x2b\x7f\x1d\x50\xb4\x24\x9e\xdd\xd0\xe5\x40\xc7\x2c\xdd\xe1\xf9\x7c\x14\xe7\xfd\x81\xd2\xfa\x74\x14\xfb\x33\xa6\x3b\x71\x16\x87\x07\xcc\xca\x55\x98\x17\x4f\xe1\xdb\xde\xbf\xad\xa0\xc6\x62\xdf\x02\xea\x0a\x5e\x48\x36\x2d\x3b\xb0\xe4\xcc\x60\x05\x45\x7a\x07\x7d\xd1\x23\xb7\x6f\xc8\x6d\xdc\x24\x8b\x2d\x1c\xde\xe3\x36\x29\x7c\x1d\x0b\xbf\x2f\x0a\xeb\xaf\xe9\xba\xd7\x89\xd7\x86\x70\xd2\x15\x68\x45\x2b\x3f\x2e\x2e\x86\x1a\x95\xf3\x77\xb2\xac\xc1\x11\xdf\x79\x0e\xe8\x40\x84\x12\x1d\xf9\xaa\xc7\xc5\xed\x5f\xd8\x00\x6a\x18\x3d\x4c\x0e\x22\x97\xe7\x4c\x96\xe9\x46\x41\x70\x59\x91\x36\x4c\xfe\x7d\x61\x59\x4b\x45\xe1\x0b\xc1\xdd\xe8\xf7\x75\xc5\x5e\x24\xb7\x32\x1e\x69\x19\x3a\x06\x9c\x9b\x54\x62\x96\x9e\x4e\x35\x1d\xc4\x1e\xcf\xd9\xe9\x3e\x3d\x1e\xea\x9d\xa0\x6c\xf7\x90\xee\x8e\xe7\x87\xd3\x0a\x99\xad\x2c\x07\x8e\x9b\x9e\x5e\xd9\xe2\x74\xfb\xcc\xba\xe0\xfb\x59\xea\x2a\x87\xc7\xcb\x65\x4c\xce\xff\xf7\x07\xfc\xe2\xce\xfa\xe1\xf1\x72\xb9\x83\x27\xff\x48\x92\xe4\xc7\x38\xbc\xfe\xbb\x44\xea\xa6\xa8\x90\xd1\x91\xdf\x3d\xef\x1f\xdf\x83\x67\x9c\x5f\x9c\x51\x38\x7d\x60\x84\x85\x3b\x5a\xac\xe2\x14\x68\x59\x93\xe3\x02\x07\x6e\x8d\xcd\xe1\x1f\xd2\x9b\x77\x4e\xa2\x6e\xe0\xb1\x45\xdd\xfc\x1f\x00\x00\xff\xff\x19\xcd\x2f\x4a\x97\x09\x00\x00"

func onnxvision_mask_rcnn_r_50_fpnYmlBytes() ([]byte, error) {
	return bindataRead(
		_onnxvision_mask_rcnn_r_50_fpnYml,
		"OnnxVision_Mask_RCNN_R_50_FPN.yml",
	)
}

func onnxvision_mask_rcnn_r_50_fpnYml() (*asset, error) {
	bytes, err := onnxvision_mask_rcnn_r_50_fpnYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "OnnxVision_Mask_RCNN_R_50_FPN.yml", size: 2455, mode: os.FileMode(420), modTime: time.Unix(1595037862, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _onnxvision_ssdYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x41\x6f\xdb\x38\x13\xbd\xfb\x57\x0c\xe0\x4b\xfb\xc1\x91\x25\xcb\xb2\x63\x01\xfd\x80\xdd\x14\xd8\x9c\x52\xa0\x29\xb6\x58\x04\x81\x30\xa2\x46\x12\x37\x14\x29\x90\x54\x6c\xf7\xd7\x2f\x48\xca\x96\xb2\xed\x02\xad\x0f\x32\xc5\x99\x79\x24\xe7\xbd\x19\x4a\x62\x47\x39\x7c\x92\xf2\xf4\x27\x37\x5c\xc9\xe2\xf1\xf1\x23\x2c\xc1\x4d\x83\xaa\xe1\xac\x06\x0d\x9d\xaa\x48\x2c\x6a\x8d\x1d\x1d\x95\x7e\xc9\x17\x00\x00\x53\xa0\x1e\xa4\xe5\x1d\xc1\x12\xae\x2e\x50\x2b\x0d\xb6\xa5\x31\xd4\xf9\xbf\x92\x76\xf8\x39\x24\x51\x1a\x25\x6f\x9c\x47\x13\x30\x25\x8d\xd5\xc8\xa5\x5d\xcc\xbc\x63\x58\x5e\x3d\xb8\xac\x95\xee\xd0\x86\x31\x18\xea\x50\x5a\xce\xae\xf6\x60\x5d\x30\x25\x2d\x72\x49\x3a\x87\x25\x5c\x5f\x0c\x0c\x86\x2a\xb0\x0a\x7a\xd2\xce\x33\xec\x0e\x7a\x4d\x15\x67\x0e\xd3\x6f\x74\x09\xdd\x20\x2c\xef\x05\x41\x2f\xd0\x3a\x47\x03\x0c\x25\x94\x04\xa6\x27\xc6\x6b\x4e\x95\xf7\xc4\xae\xda\x6d\x43\x36\xdc\x8f\xf5\x43\x0e\x1a\x79\xaf\xd5\xdf\xc4\xec\x9a\xa1\xee\xc4\x8d\x9a\x32\x94\xfb\x80\x1b\xd6\x0f\xd7\x98\xe6\x27\x63\x9a\x31\xa6\xef\xd9\x6e\x2b\xe8\x57\x16\x1d\x43\xae\x10\x3f\xb7\xec\x3c\xaa\x22\xc3\x34\xef\xad\x27\xe4\xff\x1e\xe4\x4b\xcb\xcd\x98\x3e\x6e\x3c\xd3\x8f\x5c\x36\x82\xe0\xd1\x62\x43\xf0\x91\x2c\x31\xab\xb4\x23\xc9\xa1\xc2\xab\x17\x97\x0f\xfd\x4d\xf8\x94\xdf\x78\xa6\xa9\x0a\x28\x06\xe8\xd4\x13\xb3\xc0\x65\x3f\x58\xe0\x1d\x36\x64\x40\x3a\x3a\x05\xff\x46\x95\x03\x72\xab\x18\xa7\xcb\x23\x9e\x57\xc0\x23\x8a\x20\xbd\x61\x2d\x4a\x49\x02\x3e\xff\xf1\xfb\x25\x4a\xd5\x60\x5a\xec\x09\xde\xa5\x70\x82\x7b\x38\xc1\xd7\xf7\x2b\x38\xb6\xa4\x09\xee\x01\x65\x05\x5f\x01\x35\x8d\x2b\x06\x45\x94\x04\xc9\x26\x8e\x23\xf8\xd2\xd2\x05\xa7\xc5\x57\x1a\x6d\x42\x61\x35\x6e\x42\x01\x82\x46\xd9\xf8\xf2\x78\x8a\x57\x90\x3c\x7b\x4c\xdb\x92\x9c\x6f\x78\x30\x5c\x36\xd0\x11\x4a\xf8\x00\x4f\x71\xb4\xbd\xcd\x56\x10\x47\xdb\x6c\xe7\xff\xe2\x5d\x08\x33\xb6\x0a\xf6\xcd\xe6\xe0\x0c\x9b\xcd\x36\xfc\x65\xcf\xff\x4e\xb4\x92\xe2\x0c\x28\x84\x3a\x1a\x28\xd1\xb2\xd6\xf0\x6f\x04\x1f\x20\x01\x36\x68\x4d\xd2\x8a\x73\xb4\xd0\x54\x93\x26\xc9\xc8\x38\xed\x4f\x6f\x5e\xf6\xd8\xbb\x2a\x58\xc3\x91\x4a\xc3\x2d\xb9\x21\x59\x16\x45\x10\x18\x2e\xdd\x8e\xdf\x56\xed\x0d\xb4\xd6\xf6\x26\x5f\xaf\x1b\x6e\xdb\xa1\x8c\x98\xea\xd6\x8e\xd1\x75\xa0\x6d\x6d\x35\xd1\xba\x43\x63\x49\xaf\x03\xc9\x6b\x55\x3a\x4d\x15\x95\xd7\x80\x6b\x29\x86\x9a\x8e\xa4\xf5\x65\xbb\x36\xa6\x5a\x2c\x41\x70\x46\xd2\xf8\x1c\x4e\x0b\x8e\x93\x39\x0c\x52\x93\xb1\x9a\x3b\x76\x16\xcb\xa0\x09\x7f\x82\xc9\x37\xcc\xe5\x63\xc5\xd6\x5c\x9b\x8b\x76\xec\xb9\xa7\x1f\xf4\x9f\x1b\x6f\xc8\x03\xb9\x63\x21\x2c\x61\x26\xed\xcb\x5e\x66\x58\xa3\xdb\x1b\xfd\x3b\x97\x99\x48\x47\x97\x1e\x5d\x37\xb3\xa4\x7d\xda\xfd\x16\xa6\xa9\x6b\xd9\x01\x90\x20\x97\x8a\x22\xec\xa5\x16\x0a\x6d\xba\x99\xd9\x3d\x72\x21\xf0\xec\x7a\x57\x3c\x33\x08\x3c\xab\xc1\xe6\x70\x77\xff\x75\x36\xcb\x94\x50\xba\x70\x87\xcc\x5d\x05\xcc\x2c\x15\xef\x48\x3a\x3a\x4c\x0e\x4f\xe9\xca\xab\x3b\x3c\x9f\x67\x5e\x4e\x9e\x39\x3c\x25\x9b\x34\xda\xed\xb3\x15\x24\xc9\x2e\xda\xdc\x3a\xc7\x38\x8d\xb2\x34\x7e\x86\xe5\x7f\x68\xf7\x7f\xb0\xc9\xb2\x19\x92\x61\x28\x28\x87\xa7\xec\x36\x4a\x0f\xd9\x0a\xb2\x7d\x94\x6c\x62\xff\x9f\xee\xb3\x67\x9f\xec\x37\x2a\x8f\x46\x95\x8f\x48\x6a\xb0\xfd\x60\x2f\x7c\xba\x24\xfb\x24\x8e\x9c\x04\xab\x37\x86\xcc\x95\x6a\x90\x15\x97\x4d\xa9\x4e\x63\x08\xfe\x88\xcb\x10\x37\x51\xb1\xf8\x21\x9d\xa3\xd7\x05\x13\x4a\x75\xfa\x25\xc0\x19\xf9\x53\x5f\x16\x68\x0c\x99\x0b\x95\xc9\xd5\x50\xaa\xd3\x34\x3d\x31\xdc\x6b\x55\x62\xc9\x05\xb7\x7c\x32\x4f\xca\xa8\x09\xed\xa0\xc9\x14\x83\x16\xf9\xb5\x26\x4d\x1a\x61\x87\xdf\x94\xc4\xa3\xf1\x95\x69\xac\xd2\x14\xf9\x6e\x1e\x29\xdd\xac\xcd\x59\x1a\xb2\x66\xcd\x14\x53\xfe\x51\x08\x2c\x49\x98\x62\x13\x27\x5b\xf7\xd8\x17\x25\xb2\x97\x46\xbb\xa3\x47\xf6\x64\xbf\x5f\x90\xb5\xc4\x5e\xcc\xd0\xe5\x40\xfb\x24\x4e\xf1\x70\xd8\xb3\xc3\x36\xa3\xb8\xbe\xdd\xb3\xed\x01\xe3\x94\x1d\x58\xb6\xc3\xa4\x5c\xf8\x62\x73\xfa\xbf\x5c\x93\x97\xce\xd5\x68\xec\x5b\xdf\xee\x8e\xc4\x9b\xd6\x1a\xd0\x64\xd4\xa0\x19\x85\xda\xf0\xf6\xa2\x47\xdb\xfe\xc2\xd9\xc6\x06\x34\xbb\xb4\xfc\x38\x34\xa1\xc2\x98\x2a\x72\xaf\x1e\x9f\x9b\x02\x35\x6b\xf9\xeb\xec\xe2\xac\x51\x18\xf7\xcd\xc2\x6b\x30\x64\x57\xa1\x7f\x3b\x8a\x4b\x34\xe4\xd2\xec\x2e\x36\x04\x37\x70\x3d\x5f\xc2\x88\x70\x05\x08\x2a\x9d\xb6\x3e\x3f\x5f\x98\xf0\x90\x15\x49\x65\xc9\x8d\x67\x91\x35\x17\xe4\xbf\xa0\xcc\x45\x58\xdf\xa7\xe8\xc8\x6d\x3b\xde\x7a\xf3\xa5\xc3\x82\x13\x2b\xec\x76\x7f\xd8\x25\x88\xb7\xbb\x2c\x4d\xe3\xb2\x2c\x77\x84\xe5\x61\x77\xbb\x47\xda\x6c\x0f\x3b\xb6\x40\x6b\x35\x2f\x07\x1b\x6e\x04\x3a\x59\x8d\x20\xc9\xfa\x2f\xaf\xc9\xe6\xb1\x5f\xb8\xac\x72\xb8\x7b\x78\x18\x0f\xe7\xde\xdd\x06\x25\x0d\x1a\xc5\x35\xea\xdd\xdd\xc3\xc3\x0a\x3e\xbb\x47\x14\x45\xef\x43\x59\xba\xdb\x9c\xcb\xa6\xa8\xd0\xa2\x21\xd7\xa9\x3e\xdd\x7d\x02\x27\x31\xd7\x66\xc3\xe4\xf5\x03\xcc\xb7\xe7\x31\xc2\x87\x77\x28\x79\x4d\xc6\x16\x38\xd8\x56\xe9\x1c\xfe\x22\x79\x73\x6f\x38\xca\x06\xee\x5a\x94\xcd\x3f\x01\x00\x00\xff\xff\x56\x71\x84\xc4\xa8\x0a\x00\x00"

func onnxvision_ssdYmlBytes() ([]byte, error) {
	return bindataRead(
		_onnxvision_ssdYml,
		"OnnxVision_SSD.yml",
	)
}

func onnxvision_ssdYml() (*asset, error) {
	bytes, err := onnxvision_ssdYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "OnnxVision_SSD.yml", size: 2728, mode: os.FileMode(420), modTime: time.Unix(1594593754, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _torchvision_alexnetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x5d\x6f\xdb\xb8\x12\x7d\xf7\xaf\x18\xc0\x2f\xed\x85\x2d\xc9\xfa\x70\x62\x01\xf7\x02\xbd\x79\xd8\xec\x4b\x16\x28\x8a\x2d\x16\x41\x60\x8c\xa8\x91\xc5\x2d\x45\x0a\x24\x95\xd8\xfd\xf5\x0b\x7e\xd8\x56\xda\x74\xb7\x9b\x87\x58\xe2\xcc\x1c\x0e\xe7\x9c\x19\x4a\xe2\x40\x35\x7c\x52\x9a\xf5\xbf\x73\xc3\x95\xdc\x7f\x10\x74\x7c\x20\x0b\x4b\x70\x36\x50\x1d\x9c\xd4\xa4\x61\x50\x2d\x89\x45\xa7\x71\xa0\x17\xa5\xbf\xd4\x0b\x00\x80\x10\xfd\x9b\x94\x47\x3d\x49\xcb\x07\x82\x25\x5c\x5c\xa0\x53\x1a\x6c\x4f\x31\xd4\xf9\x3f\x93\x76\x7b\xd4\xb0\x49\x8a\x64\xf3\xca\x39\x9a\x80\x29\x69\xac\x46\x2e\xed\x62\xe6\x9d\xc1\xf2\xe2\xc1\x65\xa7\xf4\x80\x36\x3c\x83\xa1\x01\xa5\xe5\xec\x62\x0f\xd6\x05\x53\xd2\x22\x97\xa4\x6b\x58\xc2\xe5\xc5\xc0\x64\xa8\x05\xab\x60\x24\xed\x3c\x43\x76\x30\x6a\x6a\x39\x73\x98\x3e\xd1\x25\x0c\x93\xb0\x7c\x14\x04\xa3\x40\xeb\x1c\x0d\x30\x94\xd0\x10\x98\x91\x18\xef\x38\xb5\xde\x13\x87\x76\x5b\x86\x6a\xb8\x3f\x36\x4e\x35\x68\xe4\xa3\x56\x7f\x12\xb3\x29\x43\x3d\x88\xb5\xba\x56\xa8\xf6\x01\x6b\x36\x4e\x97\x98\xc3\x4f\xc6\x1c\x62\xcc\x38\xb2\x6d\x29\xe8\xdf\x6c\x1a\x43\x2e\x10\x3f\xb7\xed\x3c\xaa\x25\xc3\x34\x1f\xad\x27\xe4\x7f\x1e\xe4\x53\xcf\x4d\x2c\x1f\x37\x80\xa0\x69\x14\x9c\x05\x62\x54\x77\xa5\x1e\x42\x6c\x43\xad\xe3\xcb\x2d\x9f\x35\x36\x4e\xcd\x39\x22\x89\x90\x74\x45\x3c\x90\x24\x8d\x96\x5a\x98\x0c\x97\x07\xb0\x4e\xa5\x89\x4b\x10\x1a\x74\x2c\xaa\x80\xe6\xd7\x9f\xbd\x7a\x67\x5a\xfb\x20\x3c\xab\x6b\x2f\x26\x6a\x83\xc5\x00\x1d\x47\x62\x16\xb8\x1c\x27\x0b\x7c\xc0\x03\x19\x90\x4e\x31\x82\x7f\xbd\x26\x68\x9c\xf4\x5f\xf0\xb4\x02\x9e\x50\x02\x03\x97\x7c\xdd\xa0\x65\x3d\x19\x77\xb4\x62\xcd\x7a\x94\x92\x04\x7c\xfc\xe5\xff\x67\x14\xd5\x81\xe9\x71\x24\x78\x57\xc0\x11\xee\xe1\x08\x9f\xdf\xaf\xe0\xa5\x27\x4d\x70\x0f\x28\x5b\xf8\x0c\xa8\x29\x66\x10\x44\xd8\x10\xa0\x05\x41\x68\x2c\xe4\x79\x99\xf8\x02\x44\xbc\x1e\x9f\x29\xfa\x08\x85\x6d\x4c\x4e\xb9\x42\xa3\x3c\xf8\xce\x7c\xcc\x56\xb0\x79\xf2\xd8\xb6\x27\x39\x3f\x48\x28\xd9\x40\x28\xe1\xbf\xf0\x98\x25\xe5\x6d\xb5\x82\x2c\x29\xab\xad\xff\xc9\xb6\x21\xcc\xd8\x36\xd8\xf3\x7c\xe7\x0c\x79\x5e\x86\x9f\xea\x69\xa1\xa9\x23\x4d\x92\x91\x71\x2d\x74\x7d\xf3\xdd\x83\xa3\x6b\xa6\x14\x5e\xa8\x31\xdc\x92\x7b\x24\xcb\x92\xe4\x4c\xb6\x27\xec\x55\xf3\xaf\xa1\xb7\x76\x34\x75\x9a\xa2\x3e\xf2\xe7\x44\xe9\x43\x8a\x8d\x49\x37\x65\x56\x26\xd5\x6e\x77\xf3\x8d\xd7\x81\xdb\x7e\x6a\x12\xa6\x86\x74\x3c\x79\x8e\xd3\x40\x72\xda\x08\xd5\xa4\x03\x1a\x4b\x3a\x9d\x91\x9f\x06\x8a\x53\x14\x74\x94\x64\x93\xf1\xf4\x0d\x62\x84\xf1\x3b\xb7\x8a\x99\xd4\x58\x6c\x04\xbd\x81\x91\xf4\x76\x10\xcb\xd9\x7a\x12\xd7\x23\xf6\x62\x09\x82\x33\x92\x86\x5e\x29\x7d\x11\x17\x6b\x98\xa4\x26\x63\x35\x77\x44\x2f\x96\x41\x6e\xbe\x70\x57\xdf\xb0\x56\xc7\x79\xd3\x71\x6d\xce\xb2\xb4\xa7\x91\xde\x98\x9e\x6b\x6f\xa8\x83\x3e\x62\x1b\x2f\x61\xd6\x98\xe7\x5c\x66\x58\xd1\xed\x55\xf7\x3a\x97\x99\xfe\xa3\xcb\x88\x6e\x16\x5b\xd2\x9e\x6d\x9f\xc2\x75\xe9\x32\x34\x00\x48\xd0\x40\xd2\xee\x43\x2e\x9d\x50\x68\x8b\x7c\x66\xf7\xc8\x7b\x81\x27\x37\x79\xb3\x99\x41\xe0\x49\x4d\xb6\x86\xbb\xfb\xcf\xb3\x55\xa6\x84\xd2\x7b\x77\xc8\xda\x35\xd3\xcc\xd2\xf2\x81\xa4\xab\xbd\xa9\xe1\xb1\x58\x81\x97\x66\x9e\x97\x4f\x33\x1f\xa7\xef\x1a\x1e\x37\x79\x91\x6c\x6f\xaa\x15\x6c\x36\xdb\x24\xbf\x75\x5d\x91\x15\x49\x55\x64\x4f\xb0\xfc\x81\xf8\xff\x03\x79\x55\xcd\x90\x0c\x43\x41\x35\x3c\x56\xb7\x49\xb1\xab\x56\x50\xdd\x24\x9b\x3c\xf3\xbf\xc5\x4d\xf5\xe4\x4b\xfd\xaa\x4d\x92\xd8\x26\x11\x49\x4d\x76\x9c\xec\x99\x4d\x3f\x96\x5c\x09\x23\x23\xc1\xea\x8d\xa1\x6e\x4c\xa0\x31\xbc\x8b\xc3\x2f\x46\xe1\x5b\x64\x86\xd0\x2b\x17\x8b\x37\xf9\x8c\x5e\x02\x9b\x28\x96\x19\x9d\x97\x53\xfe\x98\xd6\xbf\x27\x75\xd4\xaa\xc1\x86\x0b\x6e\x39\x99\xef\xa9\xed\x08\xed\xa4\xc9\xec\x27\x2d\x6a\xdf\x6c\x75\x9a\x9a\x22\xc1\x01\xbf\x2a\x89\x2f\xc6\xf7\xb0\xb1\x4a\x53\xe2\x2f\x19\xdf\x80\xe6\x24\x0d\x59\x93\x7a\x0d\x4a\xb2\x71\x21\xb1\x47\xfb\x3d\x32\xeb\x89\x7d\x31\xd3\x50\x43\xd9\xe6\x45\xd9\x54\xb7\x45\x81\x0c\xcb\x72\x97\xdf\x66\xdb\x0a\x37\xb7\x59\xdb\x14\xd9\x66\x8b\x0b\xdf\x2f\x4e\xc2\xe7\x7b\xfa\x7c\x47\x1d\x34\x8e\xbd\x1f\x7a\x2f\xc4\x0f\xbd\x35\xa0\xc9\xa8\x49\x33\x0a\x75\xf0\xf6\xfd\x88\xb6\xaf\x2f\x13\xe3\x1f\x4f\x11\x47\xce\xec\xd6\x9c\x4f\x93\xfd\x79\x14\x39\xbb\xdf\x84\x9b\x3d\x6a\xd6\xf3\xe7\xd9\xf5\xdd\xa1\x30\xee\xcb\x89\x77\x60\xc8\xae\xc2\x28\x77\xa4\xba\x5b\xce\x15\x35\x5c\xaf\xee\xc1\x8d\x7f\x09\x11\x61\xce\x6b\x4f\xb3\xfc\xe7\x87\x0c\x0b\x1e\xb2\x25\xa9\x2c\xb9\xe7\x59\x64\xc7\x05\xf9\xef\x38\x73\x16\xdc\xf7\x75\x7a\xe1\xb6\x8f\x17\xe3\x7c\xeb\xb0\xe1\x95\x9a\x4d\x87\xe5\xae\xdc\x95\x6d\xd9\x6c\x58\x5e\x62\x46\x54\xd1\xed\xcd\x66\x57\x64\x45\x59\xb4\xb4\x40\x6b\x35\x6f\x26\x1b\x2e\x14\x3a\x5a\x8d\x20\xc9\xfa\xef\xbf\xab\xcd\x63\x7f\xe1\xb2\xad\xe1\xee\xe1\x21\x1e\xce\xbd\xbb\x04\x25\x4d\x1a\xc5\x25\xea\xdd\xdd\xc3\xc3\x0a\x3e\xba\x7f\x49\x92\xbc\x0f\x0d\xe6\x2e\x7c\x2e\x0f\xfb\x16\x2d\x1a\xb2\x35\xfc\xea\x24\x16\xbe\x69\xe3\xda\xe5\x2b\xd0\x4f\xd9\x18\xe0\xa3\x07\x94\xbc\x23\x63\xf7\x38\xd9\x5e\xe9\x1a\xfe\x20\xb9\xbe\x37\x1c\xe5\x01\xee\x7a\x94\x87\xbf\x02\x00\x00\xff\xff\x9e\xb9\x24\x78\x32\x0b\x00\x00"

func torchvision_alexnetYmlBytes() ([]byte, error) {
	return bindataRead(
		_torchvision_alexnetYml,
		"TorchVision_AlexNet.yml",
	)
}

func torchvision_alexnetYml() (*asset, error) {
	bytes, err := torchvision_alexnetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "TorchVision_AlexNet.yml", size: 2866, mode: os.FileMode(420), modTime: time.Unix(1594496768, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _torchvision_deeplabv3_resnet101Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x4b\x6f\xe4\x46\x0e\xbe\xf7\xaf\x20\xd0\x97\xdd\x85\xad\x67\xab\x1f\x02\x76\x0f\xeb\x00\x99\x43\xe0\x09\x26\x83\x04\x81\x61\x08\x54\x89\x92\x2a\x96\xaa\x84\x2a\xaa\x6d\xcf\xaf\x0f\xaa\xa4\x56\xcb\x33\x0e\x30\xe3\x83\x5b\x22\x3f\x3e\x8a\xfc\xc8\x92\xc2\x9e\x72\xf8\xac\x8d\x68\x7f\x97\x56\x6a\x55\xfc\x44\x34\xfc\x82\xe5\x39\x2d\x3e\x91\x55\xc4\x71\x14\xc3\x16\x1c\x0e\x74\x0d\xaf\x7a\x34\xd0\xeb\x8a\xba\x4d\x6d\xb0\xa7\x67\x6d\x9e\xf2\x0d\x00\xc0\xe4\xe9\xa3\x52\x2f\x66\x54\x2c\x7b\x82\x2d\x2c\x10\xa8\xb5\x01\x6e\x69\x36\x75\xf8\x33\x19\x17\x2f\x87\x38\x48\x83\xf8\x0d\x78\x56\x81\xd0\xca\xb2\x41\xa9\x78\xb3\x42\x47\xb0\x5d\x10\x52\xd5\xda\xf4\xc8\xd3\x33\x58\xea\x51\xb1\x14\x8b\x7e\xd2\x6e\x84\x56\x8c\x52\x91\xc9\x61\x0b\xcb\x8b\x85\xd1\x52\x05\xac\x61\x20\xe3\x90\x53\x76\x30\x18\xaa\xa4\x70\x3e\x7d\xa2\x5b\xe8\xc7\x8e\xe5\xd0\x11\x0c\x1d\xb2\x03\x5a\x10\xa8\xa0\x24\xb0\x03\x09\x59\x4b\xaa\x3c\x12\xfb\x6a\xbf\x9b\xaa\xe1\xfe\xc4\x30\xe6\x60\x50\x0e\x46\xff\x45\x82\x43\x81\xa6\xef\x6e\xf5\xb5\x42\xb9\x37\xb8\x15\xc3\xb8\xd8\x34\xdf\x69\xd3\xcc\x36\xc3\x20\xf6\xbb\x8e\x7e\x24\xe8\x6c\xb2\xb8\xf8\xbe\xb0\x6b\xab\x8a\xac\x30\x72\x60\xdf\x90\xff\x79\x27\x9f\x5b\x02\xd9\x63\x43\x16\x5a\x3c\x93\x2b\x6a\x49\xd0\x69\xac\xa8\x72\x9d\x61\x0d\x08\x06\x55\xe3\x59\xf4\x10\xdd\x40\xfc\x08\xa8\x2a\x47\x0a\x05\xca\xb5\xa9\x93\x5f\xa8\x82\xd1\x4a\xd5\x40\x4f\xa8\xe0\xbf\xf0\x10\x05\xbb\x63\x76\x03\x51\xb0\xcb\xf6\xfe\x27\xda\x4f\x66\x96\xab\x49\x9f\x24\x27\xa7\x48\x92\xdd\xf4\x93\x3d\x06\x1b\x43\x35\x19\x52\x82\xac\xeb\xf7\xf5\xcd\xb7\x1a\x07\xd7\xf9\x10\x9e\xa9\xb4\x92\xc9\x3d\x12\x8b\x20\x80\xe9\x54\xa5\x0b\xff\x96\xa9\xb7\xd0\x32\x0f\x36\x0f\x43\x34\x2f\xf2\x1c\x68\xd3\x84\x43\x55\x87\xf1\x21\xda\x07\x51\x96\x1d\x0f\xc1\x50\xd5\x5f\x41\x1b\xc9\xed\x58\x06\x42\xf7\xe1\xf0\xca\x6e\xbe\xc2\xb3\x1f\xb0\xb0\xec\x74\x19\xf6\x68\x99\x4c\xe8\x15\xb3\xdc\x07\xb4\xa1\xa5\xa6\x27\xc5\x9e\xd3\x61\x45\x34\x74\x6e\x18\x83\xe1\xf5\xab\x00\xb3\x57\x9f\x4d\xa5\x85\x0d\x2d\x63\xd9\xd1\x3b\x2e\x83\x96\xfb\x6e\xb3\x85\x4e\x0a\x52\xd6\x37\xe0\x7a\xc0\x59\x98\xc3\xa8\x0c\x59\x36\x52\x30\x55\x9b\x2d\x48\x35\x8c\xec\x2b\x76\xc5\x4e\xb2\x7c\x9e\x8a\x5a\x1a\xcb\x13\x0e\xf8\x75\xa0\x77\x66\xfc\xd6\x2b\xf2\x89\x19\x33\xd9\xb6\xb0\xa2\xcf\x25\x97\x95\xaf\x19\xf6\x86\x63\x0e\x32\x05\x5a\x7b\x1a\xd0\x6d\x0c\x26\xe3\xdb\xec\x53\xb8\x8a\x16\x6a\x03\x50\x47\xae\xa2\xc5\x94\x4b\xdd\x69\xe4\x34\x59\xe9\xbd\xe7\xa2\xc3\x57\xb7\x1f\xa2\x95\xa2\xc3\x57\x3d\x72\x0e\x77\x1f\xfe\x58\x49\x85\xee\xb4\x29\xdc\x21\x73\xf8\xf4\xf3\xff\x57\x1a\xc7\xda\x1c\x1e\xe2\x24\x0d\xf6\x87\xec\x06\xe2\x78\x1f\x24\x47\xc7\xf5\x28\x0d\xb2\x34\x7a\x84\xed\x3f\x50\xfa\x3f\x90\x64\xd9\xca\x93\x15\xd8\x51\x0e\x0f\xd9\x31\x48\x4f\xd9\x0d\x64\x87\x20\x4e\x22\xff\x9b\x1e\xb2\x47\x5f\xc6\x37\xe4\x0f\x66\xf2\xcf\x9e\xf4\xc8\xc3\xc8\xae\x53\xd3\xa1\x2f\x8b\x71\x26\xd7\xe6\x9d\xfa\x4e\x26\xd7\x15\x3a\x43\x61\x0b\xf8\x5e\xc7\x66\xf8\x52\xf0\xcd\x9b\x7e\x6c\xbe\xad\xbb\x54\xbc\xdf\x79\x79\x8f\xf6\xc9\x5e\xea\xfd\xdb\x1c\xef\xd7\x65\xe9\x4e\xad\xab\x09\x79\x34\x64\x8b\xd1\x74\xf9\x42\x7a\x9b\x06\xd8\xe3\x17\xad\xf0\xd9\xfa\xd9\xb2\xac\x0d\x05\x7e\x5d\xf9\x49\x98\x87\x88\x49\x59\x6d\xea\x4e\x3f\x5f\x24\xcb\x24\x15\xbd\x3a\x27\xc5\x80\xae\xc4\x85\xbf\x5d\x0a\x1c\x9b\x22\x89\xe2\x63\x11\xc5\x45\x72\x0a\x27\xdd\xed\x59\x8b\x5b\xd1\xa1\xb5\x64\x03\x7e\xe1\xb7\x59\x89\x96\xc4\x93\x1d\xfb\x1c\x4e\x82\x76\xe9\xa9\x14\x75\xb9\xdb\x89\x34\xda\xd1\xee\x84\x51\x4d\x31\x52\x7a\x3a\xd6\xfb\xd3\xc6\x27\xe0\x18\x7a\xb9\x2c\xec\x7c\xcf\x34\x06\x87\xd6\x6f\xb3\x67\x92\x4d\xcb\x16\x0c\x59\x3d\x1a\x41\x53\x09\xbc\xbe\x18\x90\xdb\x1f\x2f\xc0\x6a\x75\xaf\x37\x42\x71\x2d\x83\xb9\xdc\xee\x81\xc3\xfa\x80\xd2\x16\x68\x44\x2b\xcf\xab\xfb\xa4\xc6\xce\xba\xab\x5c\xd6\x60\x89\x6f\xa6\x7d\xed\x08\x50\xa2\x25\xd7\x1c\x90\x16\x10\xdc\x83\xdb\xf1\x0a\x66\x0f\x8b\x83\xad\x47\x5f\xcf\xb2\x3e\xf0\x24\xf0\x2e\x2b\x52\x9a\xc9\x3d\xaf\x2c\x6b\xd9\x91\xff\xb0\xb0\x17\xda\x7d\x5b\xb3\x67\xc9\xad\x9c\x52\x5a\x87\x9e\x02\x5e\xdb\x74\xc0\x32\xc3\x53\x92\x8a\xac\xdc\xd5\xfb\x43\x5a\x57\xd9\x8e\xc4\x71\x9f\x62\x5a\x61\x2c\xb2\x0d\x32\x1b\x59\x8e\x3c\x5d\x1a\xf4\xc2\x06\x41\x11\xfb\x0f\x92\xab\xce\xfb\x7e\x92\xaa\xca\xe1\xee\xfe\x7e\x3e\x9c\x7b\x77\x09\x2a\x1a\x0d\x76\x8b\xd5\xbf\xee\xee\xef\x6f\xe0\x93\xfb\x17\x04\xc1\xbf\xbd\xa9\x27\x9c\x54\x4d\x51\x21\xa3\x25\xb7\x5c\x3e\xde\x7d\x84\x24\x8a\x0f\x6e\x33\x4e\xc2\xe5\xbb\xc4\x6f\xd4\xd9\x62\x1e\x1d\x25\x6b\xb2\x5c\xe0\xc8\xad\x36\x39\xfc\x49\xea\xf6\x83\x95\xa8\x1a\xb8\x6b\x51\x35\x7f\x07\x00\x00\xff\xff\xbd\x3f\xac\x94\xd0\x09\x00\x00"

func torchvision_deeplabv3_resnet101YmlBytes() ([]byte, error) {
	return bindataRead(
		_torchvision_deeplabv3_resnet101Yml,
		"TorchVision_DeepLabv3_Resnet101.yml",
	)
}

func torchvision_deeplabv3_resnet101Yml() (*asset, error) {
	bytes, err := torchvision_deeplabv3_resnet101YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "TorchVision_DeepLabv3_Resnet101.yml", size: 2512, mode: os.FileMode(420), modTime: time.Unix(1595101732, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _torchvision_fcn_resnet101Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\xdd\x6e\xe3\xb6\x12\xbe\xf7\x53\x0c\xe0\x9b\x73\x0e\x12\xea\xd7\x8e\x2d\xe0\xf4\xa2\x01\xda\xbd\xca\x16\xdb\x45\x8b\x22\x08\x84\x11\x35\x92\xd8\x48\xa4\x40\x8e\x9c\x64\x9f\xbe\x20\xa5\xd8\xca\x6e\x0a\xec\xfa\xc2\xa2\x66\xbe\xf9\xe1\xcc\xc7\xa1\x34\x0e\x54\xc0\x67\x63\x65\xf7\x87\x72\xca\xe8\xf2\x97\xdb\xbb\xf2\x13\x39\x4d\x9c\xc4\x09\x6c\xc1\x23\xc0\x34\xf0\x62\x26\x0b\x83\xa9\xa9\xdf\x34\x16\x07\x7a\x32\xf6\xb1\xd8\x00\x00\xcc\x3e\x3e\x6a\xfd\x6c\x27\xcd\x6a\x20\xd8\xc2\x19\x02\x8d\xb1\xc0\x1d\x2d\xa6\x1e\x7f\x22\xeb\x23\x15\x90\x88\x4c\x24\x6f\xc0\x8b\x0a\xa4\xd1\x8e\x2d\x2a\xcd\x9b\x15\x3a\x86\xed\x19\xa1\x74\x63\xec\x80\x3c\xaf\xc1\xd1\x80\x9a\x95\x3c\xeb\x67\xed\x46\x1a\xcd\xa8\x34\xd9\x02\xb6\x70\x7e\x71\x30\x39\xaa\x81\x0d\x8c\x64\x3d\x72\xce\x0e\x46\x4b\xb5\x92\xde\x67\x48\x74\x0b\xc3\xd4\xb3\x1a\x7b\x82\xb1\x47\xf6\x40\x07\x12\x35\x54\x04\x6e\x24\xa9\x1a\x45\x75\x40\xe2\x50\xef\xf3\xb9\x1a\xfe\x27\xc7\xa9\x00\x8b\x6a\xb4\xe6\x6f\x92\x1c\x49\xb4\x43\x7f\x6d\x2e\x15\x2a\x82\xc1\xb5\x1c\xa7\xb3\x4d\xfb\x9d\x36\xed\x62\x33\x8e\x72\x9f\xf7\xf4\x23\x41\x17\x93\xb3\x8b\xef\x0b\xbb\xb6\xaa\xc9\x49\xab\x46\x0e\x0d\xf9\x29\x38\xf9\xdc\x11\xa8\x01\x5b\x72\xd0\xe1\x89\x7c\x51\x2b\x82\xde\x60\x4d\xb5\xef\x0c\x1b\x40\xb0\xa8\xdb\xc0\xa2\xfb\xf8\x0a\x92\x07\x40\x5d\x7b\x52\x68\xd0\xbe\x4d\xbd\xfa\x42\x35\x4c\x4e\xe9\x16\x06\x42\x0d\xff\x87\xfb\x58\xe4\x87\xdd\x15\xc4\x22\xdf\xed\xc3\x23\xde\xcf\x66\x8e\xeb\x59\x9f\xa6\x47\xaf\x48\xd3\x7c\x7e\xec\x1e\xc4\xc6\x52\x43\x96\xb4\x24\xe7\xfb\x7d\x79\x0b\xad\xc6\xd1\x77\x3e\x82\x27\xaa\x9c\x62\xf2\x4b\x62\x29\x04\xcc\xbb\xaa\x7c\xf8\xb7\x4c\xbd\x86\x8e\x79\x74\x45\x14\xa1\x7d\x56\x27\x61\x6c\x1b\x8d\x75\x13\x25\x79\x92\x88\x3c\xce\x0e\x62\xac\x9b\xaf\x90\xad\xe2\x6e\xaa\x84\x34\x43\x34\xbe\xb0\x3f\x58\xd1\x29\x9c\xac\xa8\xea\x4d\x15\x9d\x62\x91\x8b\x38\x0a\x8a\x45\x1e\xe2\xb9\xc8\x51\x3b\x90\xe6\x40\xe9\xa8\x91\x5a\x8c\x2f\x5f\xb9\x5e\xfc\x85\x34\x6a\x23\x5d\xe4\x18\xab\x9e\xde\x71\x26\x3a\x1e\xfa\xcd\x16\x7a\x25\x49\xbb\x50\xf9\xcb\xce\x16\x61\x01\x93\xb6\xe4\xd8\x2a\xc9\x54\x6f\xb6\xa0\xf4\x38\x71\x28\xd5\x05\x3b\xcb\x8a\xe5\x38\x34\xca\x3a\x9e\x71\xc0\x2f\x23\xbd\x73\xb8\xaf\x83\xa2\x98\x29\xb1\xb0\x6c\x0b\x2b\xde\xbc\xe6\xb2\xf2\xb5\xc0\xde\x90\xcb\x43\xe6\x40\x6b\x4f\x23\xfa\x51\xc1\x64\x43\x7f\x43\x0a\x17\xd1\x99\xd3\x00\xd4\x93\xaf\x65\x39\xe7\xd2\xf4\x06\x39\x4b\x57\xfa\xe0\xb9\xec\xf1\xc5\x0f\x86\x78\xa5\xe8\xf1\xc5\x4c\x5c\xc0\xed\x87\x3f\x57\x52\x69\x7a\x63\x4b\xbf\xc9\x02\x3e\xfd\xfa\xf3\x4a\xe3\xe9\x5a\xc0\x7d\x92\x66\x62\x7f\xb3\xbb\x82\x24\xd9\x8b\xf4\xe0\x49\x1e\x67\x62\x97\xc5\x0f\xb0\xfd\x17\x2e\xff\x0f\xd2\xdd\x6e\xe5\xc9\x49\xec\xa9\x80\xfb\xdd\x41\x64\xc7\xdd\x15\xec\x6e\x44\x92\xc6\xe1\x99\xdd\xec\x1e\x42\x19\xdf\xb0\x5e\x2c\xac\x5f\x3c\x99\x89\xc7\x89\x7d\xa7\xe6\x4d\xbf\x4e\xc4\x85\x56\x9b\x77\xea\x3b\x9b\x5c\x66\xe7\x02\x85\x2d\xe0\x7b\x1d\x5b\xe0\xe7\x82\x6f\xde\xf4\x63\xf3\x6d\xdd\x95\xe6\x7d\x1e\xe4\x03\xba\x47\xf7\x5a\xef\xdf\x97\x78\xbf\x9d\xa7\xed\xdc\xba\x86\x90\x27\x4b\xae\x9c\x6c\x5f\x9c\x49\xef\x32\x81\x03\x7e\x31\x1a\x9f\x5c\x38\x55\x8e\x8d\x25\x11\xe6\x54\x38\x09\xcb\xf1\x61\xd2\xce\xd8\xa6\x37\x4f\xaf\x92\x9a\x68\xec\xb1\x3a\x65\xe5\xa0\x4f\x69\x39\xa2\x2f\x71\x19\xae\x95\x12\xa7\xb6\x4c\xe3\xe4\x50\xc6\x49\x99\x1e\xa3\x59\x77\x7d\x32\xf2\x5a\xf6\xe8\x1c\x39\xc1\xcf\xfc\x36\x2b\xd9\x91\x7c\x74\xd3\x50\xc0\x51\x52\x9e\x1d\x2b\xd9\x54\x79\x2e\xb3\x38\xa7\xfc\x88\x71\x43\x09\x52\x76\x3c\x34\xfb\xe3\x26\x24\xe0\x19\xfa\x7a\x4b\xb8\xe5\x82\x69\x2d\x8e\x5d\x18\x63\x4f\xa4\xda\x8e\x1d\x58\x72\x66\xb2\x92\xe6\x12\x04\x7d\x39\x22\x77\x3f\x5e\x80\xd5\xcc\x5e\x4f\x84\xb2\x91\xba\xb4\xaf\x17\xba\xf0\xa8\x10\x4a\xb9\x12\xad\xec\xd4\x69\x75\x85\x34\xd8\x3b\x7f\x7b\xab\x06\x1c\xf1\xd5\x3c\xa2\x7d\xeb\x2b\x74\xe4\xdb\x02\xca\x01\x82\x5f\xf8\xb1\xae\x61\xf1\x70\x76\xb0\x0d\xe8\xcb\x2e\xd6\x5b\x9d\x05\xc1\x65\x4d\xda\x30\xf9\xf5\xca\xb2\x51\x3d\x85\x6f\x09\xf7\x4a\xb8\x6f\xab\xf5\xa4\xb8\x53\x73\x4a\xeb\xd0\x73\xc0\x4b\x83\xf2\x2a\xcd\x77\x71\x86\xf1\xe1\x88\x75\x85\x69\x9d\xc4\x55\x7a\xdc\x63\xdd\xdc\xec\x63\x79\xb8\xd9\x20\xb3\x55\xd5\xc4\xf3\x3d\x41\xcf\x6c\x11\x34\x71\xf8\x06\xb9\xe8\x82\xef\x47\xa5\xeb\x02\x6e\xef\xee\x96\xcd\xf9\x77\x9f\xa0\xa6\xc9\x62\x7f\xb6\xfa\xcf\xed\xdd\xdd\x15\x7c\xf2\x7f\x42\x88\xff\x06\xd3\x40\x35\xa5\xdb\xb2\x46\x46\x47\x7e\xac\x7c\xbc\xfd\x08\x69\x9c\xdc\xf8\x99\x38\x0b\xcf\x9f\x22\x61\x96\x2e\x16\xcb\xa1\xd1\xaa\x21\xc7\x25\x4e\xdc\x19\x5b\xc0\x5f\xa4\xaf\x3f\x38\x85\xba\x85\xdb\x0e\x75\xfb\x4f\x00\x00\x00\xff\xff\xc1\xb7\xa2\x7f\xbd\x09\x00\x00"

func torchvision_fcn_resnet101YmlBytes() ([]byte, error) {
	return bindataRead(
		_torchvision_fcn_resnet101Yml,
		"TorchVision_FCN_Resnet101.yml",
	)
}

func torchvision_fcn_resnet101Yml() (*asset, error) {
	bytes, err := torchvision_fcn_resnet101YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "TorchVision_FCN_Resnet101.yml", size: 2493, mode: os.FileMode(420), modTime: time.Unix(1595102350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"MobileNet_SSD_Lite_v2.0.yml": mobilenet_ssd_lite_v20Yml,
	"MobileNetv1_SSD.yml": mobilenetv1_ssdYml,
	"OnnxVision_Mask_RCNN_R_50_FPN.yml": onnxvision_mask_rcnn_r_50_fpnYml,
	"OnnxVision_SSD.yml": onnxvision_ssdYml,
	"TorchVision_AlexNet.yml": torchvision_alexnetYml,
	"TorchVision_DeepLabv3_Resnet101.yml": torchvision_deeplabv3_resnet101Yml,
	"TorchVision_FCN_Resnet101.yml": torchvision_fcn_resnet101Yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"MobileNet_SSD_Lite_v2.0.yml": &bintree{mobilenet_ssd_lite_v20Yml, map[string]*bintree{}},
	"MobileNetv1_SSD.yml": &bintree{mobilenetv1_ssdYml, map[string]*bintree{}},
	"OnnxVision_Mask_RCNN_R_50_FPN.yml": &bintree{onnxvision_mask_rcnn_r_50_fpnYml, map[string]*bintree{}},
	"OnnxVision_SSD.yml": &bintree{onnxvision_ssdYml, map[string]*bintree{}},
	"TorchVision_AlexNet.yml": &bintree{torchvision_alexnetYml, map[string]*bintree{}},
	"TorchVision_DeepLabv3_Resnet101.yml": &bintree{torchvision_deeplabv3_resnet101Yml, map[string]*bintree{}},
	"TorchVision_FCN_Resnet101.yml": &bintree{torchvision_fcn_resnet101Yml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

