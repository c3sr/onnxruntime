// Code generated by go-bindata.
// sources:
// builtin_models/OnnxVision_Mask_RCNN_R_50_FPN.yml
// builtin_models/OnnxVision_SSD.yml
// builtin_models/TorchVision_AlexNet.yml
// DO NOT EDIT!

package onnxruntime

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _onnxvision_mask_rcnn_r_50_fpnYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\xcd\x8e\xe3\x36\x0c\xbe\xe7\x29\x08\xe4\xd2\x02\x13\xc7\x9e\x24\x93\xc4\x40\x7b\xe8\x00\xed\x5e\x9a\x2d\x06\x45\x8b\x62\x51\x18\xb4\x4c\xdb\xea\xc8\x92\x21\xd1\x3b\x93\x7d\xfa\x42\x92\x63\x7b\x7f\x0e\x3b\x39\x18\x0e\xf9\x91\x14\xc9\x8f\x94\x35\x76\x94\xc3\x7b\xad\x5f\xff\x92\x4e\x1a\x5d\xfc\x8e\xee\xb9\x78\x7a\xbc\x5c\x8a\xa7\xe2\x90\x16\xbf\xfe\x71\x81\x35\x78\x14\x98\x1a\xae\x66\xb0\xd0\x99\x8a\xd4\xaa\xb6\xd8\xd1\x8b\xb1\xcf\xf9\x0a\x00\x60\xf6\x63\x07\xcd\xb2\x23\x58\xc3\x04\x81\xda\x58\xe0\x96\x46\x53\x8f\xff\x48\xd6\x87\xcb\x21\x4b\x76\x49\xf6\x19\x78\x54\x81\x30\xda\xb1\x45\xa9\x79\xb5\x40\xa7\xb0\x9e\x10\x52\xd7\xc6\x76\xc8\xf1\x1d\x1c\x75\xa8\x59\x8a\x49\x1f\xb5\x2b\x61\x34\xa3\xd4\x64\x73\x58\xc3\xf4\xc7\xc1\xe0\xa8\x02\x36\xd0\x93\xf5\xc8\x78\x3a\xe8\x2d\x55\x52\x78\x9f\xe1\xa0\x6b\xe8\x06\xc5\xb2\x57\x04\xbd\x42\xf6\x40\x07\x02\x35\x94\x04\xae\x27\x21\x6b\x49\x55\x40\x62\x57\x3d\xec\x63\x35\xfc\x4f\xf4\x43\x0e\x16\x65\x6f\xcd\x7f\x24\x78\x2b\xd0\x76\x6a\x63\xe6\x0a\xe5\xc1\x60\x23\xfa\x61\xb2\x69\xbe\xd3\xa6\x19\x6d\xfa\x5e\x3c\xec\x15\xbd\x25\xe8\x68\x32\xb9\xf8\xbe\xb0\x4b\xab\x8a\x9c\xb0\xb2\xe7\xd0\x90\x9f\x83\x93\x3f\x5b\xe9\xc6\xf2\x49\x07\x08\x96\x50\x6d\x02\x0b\x34\x0d\x16\x15\x68\xe2\x89\x08\xa6\xf4\x41\x40\x6a\xc7\xa8\x05\x81\xa3\xa6\x23\xcd\xb1\x8d\xdc\x22\x43\x45\x4c\x82\x1d\x9c\x52\xa8\x64\x5d\x93\x25\xcd\x20\x14\x3a\x47\x2e\xf9\x32\xa0\xd1\xea\x0a\xa8\x94\x79\x71\x50\x22\x8b\xd6\xc9\x4f\x04\x3f\x41\x06\x62\xb0\xde\x52\x5d\x93\x95\xa5\xe0\x45\x90\xf3\x1c\x98\xff\x85\xf6\x63\xef\xd9\xb0\x85\x17\x2a\x9d\x64\xf2\xaf\xc4\x22\x49\x20\x66\x5a\x4a\xdd\x7c\xc1\xde\x0d\xb4\xcc\xbd\xcb\xb7\xdb\x46\x72\x3b\x94\x89\x30\xdd\xd6\xd7\x6b\x1b\x30\x6e\xcb\x96\x68\xdb\xa1\x63\xb2\xdb\x8f\x61\xb0\xb6\x31\xed\x22\xe6\xe6\x27\x6d\x99\xb7\xc7\x3e\x6f\xac\xd0\x7a\xb5\x06\x25\x05\x69\x17\x06\x6e\x0e\x3b\x0a\x73\x18\xb4\x25\xc7\x56\x0a\xa6\x6a\xb5\x06\xa9\xfb\x81\x43\x1e\x33\x36\xca\xf2\x91\xbf\xb5\xb4\x8e\x23\x0e\xf8\xda\xd3\x37\xa6\x71\x13\x14\x39\xc8\x0e\x1b\x1a\x69\xb1\x86\x45\xa3\x6f\x67\x59\xf8\x1a\x61\x9f\xb1\xc1\x43\x62\xa0\xa5\xa7\x1e\xfd\x6c\x33\xd9\x50\xfc\x70\x84\x59\x34\x91\x10\x80\x14\xf9\x82\x14\xf1\x2c\xb5\x32\xc8\xbb\xfb\x85\x3e\x78\x2e\x14\x5e\xfd\x24\xa7\x0b\x85\xc2\xab\x19\x38\x87\xc7\x77\x7f\x2f\xa4\xc2\x28\x63\x0b\x9f\x64\x0e\xbf\xfc\xf6\xb4\xd0\x54\xb2\x23\xed\x9b\xe2\x72\xf8\xb0\xbb\x83\x53\x9a\x86\xc7\xbf\x0b\x4c\x47\xa8\x73\xf8\x90\xa5\xf7\xc9\xf9\x94\x66\x77\x90\x65\x87\xe4\xbc\x7f\x38\xdc\x41\x76\x7f\x9f\x1c\x8f\xd9\x71\x09\x77\x02\x15\xe5\x90\xad\xcc\xc0\xfd\xc0\xb7\xda\xfb\x82\x84\x84\xc7\xfa\x45\x6d\x50\xc6\x2c\x4b\x33\xe8\x4a\xea\xa6\x34\xaf\xa3\x09\x7e\xab\xee\xd1\x6e\x2e\xdb\xea\x9b\xa5\x1f\x51\x37\x9f\x50\x9a\xd7\x37\x39\x5c\x34\x6a\xde\x28\x71\xec\x6e\x65\xcf\x26\x45\x69\x5e\x67\xf1\xdc\x8d\xde\x9a\x12\x4b\xa9\x24\xcb\x59\x3d\x77\xd1\xf3\x7c\x12\xef\x26\x71\x4d\xc8\x83\x25\x57\x0c\x56\xe5\xd3\x70\xb9\x5d\x82\x1d\x7e\x32\x1a\x5f\x5c\x18\x31\xc7\xc6\x52\x12\xd6\x53\x62\x6c\xb3\x75\x57\xed\x88\xdd\x56\x18\x61\xc2\xa3\x50\x58\x92\x72\xc5\x7d\x9a\xed\xfd\xe3\x58\x94\x28\x9e\x1b\xeb\x2b\x92\xf0\x2b\x7f\x1d\x50\xb4\x24\x9e\xdd\xd0\xe5\x40\xc7\x2c\xdd\xe1\xf9\x7c\x14\xe7\xfd\x81\xd2\xfa\x74\x14\xfb\x33\xa6\x3b\x71\x16\x87\x07\xcc\xca\x55\x98\x17\x4f\xe1\xdb\xde\xbf\xad\xa0\xc6\x62\xdf\x02\xea\x0a\x5e\x48\x36\x2d\x3b\xb0\xe4\xcc\x60\x05\x45\x7a\x07\x7d\xd1\x23\xb7\x6f\xc8\x6d\xdc\x24\x8b\x2d\x1c\xde\xe3\x36\x29\x7c\x1d\x0b\xbf\x2f\x0a\xeb\xaf\xe9\xba\xd7\x89\xd7\x86\x70\xd2\x15\x68\x45\x2b\x3f\x2e\x2e\x86\x1a\x95\xf3\x77\xb2\xac\xc1\x11\xdf\x79\x0e\xe8\x40\x84\x12\x1d\xf9\xaa\xc7\xc5\xed\x5f\xd8\x00\x6a\x18\x3d\x4c\x0e\x22\x97\xe7\x4c\x96\xe9\x46\x41\x70\x59\x91\x36\x4c\xfe\x7d\x61\x59\x4b\x45\xe1\x0b\xc1\xdd\xe8\xf7\x75\xc5\x5e\x24\xb7\x32\x1e\x69\x19\x3a\x06\x9c\x9b\x54\x62\x96\x9e\x4e\x35\x1d\xc4\x1e\xcf\xd9\xe9\x3e\x3d\x1e\xea\x9d\xa0\x6c\xf7\x90\xee\x8e\xe7\x87\xd3\x0a\x99\xad\x2c\x07\x8e\x9b\x9e\x5e\xd9\xe2\x74\xfb\xcc\xba\xe0\xfb\x59\xea\x2a\x87\xc7\xcb\x65\x4c\xce\xff\xf7\x07\xfc\xe2\xce\xfa\xe1\xf1\x72\xb9\x83\x27\xff\x48\x92\xe4\xc7\x38\xbc\xfe\xbb\x44\xea\xa6\xa8\x90\xd1\x91\xdf\x3d\xef\x1f\xdf\x83\x67\x9c\x5f\x9c\x51\x38\x7d\x60\x84\x85\x3b\x5a\xac\xe2\x14\x68\x59\x93\xe3\x02\x07\x6e\x8d\xcd\xe1\x1f\xd2\x9b\x77\x4e\xa2\x6e\xe0\xb1\x45\xdd\xfc\x1f\x00\x00\xff\xff\x19\xcd\x2f\x4a\x97\x09\x00\x00"

func onnxvision_mask_rcnn_r_50_fpnYmlBytes() ([]byte, error) {
	return bindataRead(
		_onnxvision_mask_rcnn_r_50_fpnYml,
		"OnnxVision_Mask_RCNN_R_50_FPN.yml",
	)
}

func onnxvision_mask_rcnn_r_50_fpnYml() (*asset, error) {
	bytes, err := onnxvision_mask_rcnn_r_50_fpnYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "OnnxVision_Mask_RCNN_R_50_FPN.yml", size: 2455, mode: os.FileMode(420), modTime: time.Unix(1595037862, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _onnxvision_ssdYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x41\x6f\xdb\x38\x13\xbd\xfb\x57\x0c\xe0\x4b\xfb\xc1\x91\x25\xcb\xb2\x63\x01\xfd\x80\xdd\x14\xd8\x9c\x52\xa0\x29\xb6\x58\x04\x81\x30\xa2\x46\x12\x37\x14\x29\x90\x54\x6c\xf7\xd7\x2f\x48\xca\x96\xb2\xed\x02\xad\x0f\x32\xc5\x99\x79\x24\xe7\xbd\x19\x4a\x62\x47\x39\x7c\x92\xf2\xf4\x27\x37\x5c\xc9\xe2\xf1\xf1\x23\x2c\xc1\x4d\x83\xaa\xe1\xac\x06\x0d\x9d\xaa\x48\x2c\x6a\x8d\x1d\x1d\x95\x7e\xc9\x17\x00\x00\x53\xa0\x1e\xa4\xe5\x1d\xc1\x12\xae\x2e\x50\x2b\x0d\xb6\xa5\x31\xd4\xf9\xbf\x92\x76\xf8\x39\x24\x51\x1a\x25\x6f\x9c\x47\x13\x30\x25\x8d\xd5\xc8\xa5\x5d\xcc\xbc\x63\x58\x5e\x3d\xb8\xac\x95\xee\xd0\x86\x31\x18\xea\x50\x5a\xce\xae\xf6\x60\x5d\x30\x25\x2d\x72\x49\x3a\x87\x25\x5c\x5f\x0c\x0c\x86\x2a\xb0\x0a\x7a\xd2\xce\x33\xec\x0e\x7a\x4d\x15\x67\x0e\xd3\x6f\x74\x09\xdd\x20\x2c\xef\x05\x41\x2f\xd0\x3a\x47\x03\x0c\x25\x94\x04\xa6\x27\xc6\x6b\x4e\x95\xf7\xc4\xae\xda\x6d\x43\x36\xdc\x8f\xf5\x43\x0e\x1a\x79\xaf\xd5\xdf\xc4\xec\x9a\xa1\xee\xc4\x8d\x9a\x32\x94\xfb\x80\x1b\xd6\x0f\xd7\x98\xe6\x27\x63\x9a\x31\xa6\xef\xd9\x6e\x2b\xe8\x57\x16\x1d\x43\xae\x10\x3f\xb7\xec\x3c\xaa\x22\xc3\x34\xef\xad\x27\xe4\xff\x1e\xe4\x4b\xcb\xcd\x98\x3e\x6e\x3c\xd3\x8f\x5c\x36\x82\xe0\xd1\x62\x43\xf0\x91\x2c\x31\xab\xb4\x23\xc9\xa1\xc2\xab\x17\x97\x0f\xfd\x4d\xf8\x94\xdf\x78\xa6\xa9\x0a\x28\x06\xe8\xd4\x13\xb3\xc0\x65\x3f\x58\xe0\x1d\x36\x64\x40\x3a\x3a\x05\xff\x46\x95\x03\x72\xab\x18\xa7\xcb\x23\x9e\x57\xc0\x23\x8a\x20\xbd\x61\x2d\x4a\x49\x02\x3e\xff\xf1\xfb\x25\x4a\xd5\x60\x5a\xec\x09\xde\xa5\x70\x82\x7b\x38\xc1\xd7\xf7\x2b\x38\xb6\xa4\x09\xee\x01\x65\x05\x5f\x01\x35\x8d\x2b\x06\x45\x94\x04\xc9\x26\x8e\x23\xf8\xd2\xd2\x05\xa7\xc5\x57\x1a\x6d\x42\x61\x35\x6e\x42\x01\x82\x46\xd9\xf8\xf2\x78\x8a\x57\x90\x3c\x7b\x4c\xdb\x92\x9c\x6f\x78\x30\x5c\x36\xd0\x11\x4a\xf8\x00\x4f\x71\xb4\xbd\xcd\x56\x10\x47\xdb\x6c\xe7\xff\xe2\x5d\x08\x33\xb6\x0a\xf6\xcd\xe6\xe0\x0c\x9b\xcd\x36\xfc\x65\xcf\xff\x4e\xb4\x92\xe2\x0c\x28\x84\x3a\x1a\x28\xd1\xb2\xd6\xf0\x6f\x04\x1f\x20\x01\x36\x68\x4d\xd2\x8a\x73\xb4\xd0\x54\x93\x26\xc9\xc8\x38\xed\x4f\x6f\x5e\xf6\xd8\xbb\x2a\x58\xc3\x91\x4a\xc3\x2d\xb9\x21\x59\x16\x45\x10\x18\x2e\xdd\x8e\xdf\x56\xed\x0d\xb4\xd6\xf6\x26\x5f\xaf\x1b\x6e\xdb\xa1\x8c\x98\xea\xd6\x8e\xd1\x75\xa0\x6d\x6d\x35\xd1\xba\x43\x63\x49\xaf\x03\xc9\x6b\x55\x3a\x4d\x15\x95\xd7\x80\x6b\x29\x86\x9a\x8e\xa4\xf5\x65\xbb\x36\xa6\x5a\x2c\x41\x70\x46\xd2\xf8\x1c\x4e\x0b\x8e\x93\x39\x0c\x52\x93\xb1\x9a\x3b\x76\x16\xcb\xa0\x09\x7f\x82\xc9\x37\xcc\xe5\x63\xc5\xd6\x5c\x9b\x8b\x76\xec\xb9\xa7\x1f\xf4\x9f\x1b\x6f\xc8\x03\xb9\x63\x21\x2c\x61\x26\xed\xcb\x5e\x66\x58\xa3\xdb\x1b\xfd\x3b\x97\x99\x48\x47\x97\x1e\x5d\x37\xb3\xa4\x7d\xda\xfd\x16\xa6\xa9\x6b\xd9\x01\x90\x20\x97\x8a\x22\xec\xa5\x16\x0a\x6d\xba\x99\xd9\x3d\x72\x21\xf0\xec\x7a\x57\x3c\x33\x08\x3c\xab\xc1\xe6\x70\x77\xff\x75\x36\xcb\x94\x50\xba\x70\x87\xcc\x5d\x05\xcc\x2c\x15\xef\x48\x3a\x3a\x4c\x0e\x4f\xe9\xca\xab\x3b\x3c\x9f\x67\x5e\x4e\x9e\x39\x3c\x25\x9b\x34\xda\xed\xb3\x15\x24\xc9\x2e\xda\xdc\x3a\xc7\x38\x8d\xb2\x34\x7e\x86\xe5\x7f\x68\xf7\x7f\xb0\xc9\xb2\x19\x92\x61\x28\x28\x87\xa7\xec\x36\x4a\x0f\xd9\x0a\xb2\x7d\x94\x6c\x62\xff\x9f\xee\xb3\x67\x9f\xec\x37\x2a\x8f\x46\x95\x8f\x48\x6a\xb0\xfd\x60\x2f\x7c\xba\x24\xfb\x24\x8e\x9c\x04\xab\x37\x86\xcc\x95\x6a\x90\x15\x97\x4d\xa9\x4e\x63\x08\xfe\x88\xcb\x10\x37\x51\xb1\xf8\x21\x9d\xa3\xd7\x05\x13\x4a\x75\xfa\x25\xc0\x19\xf9\x53\x5f\x16\x68\x0c\x99\x0b\x95\xc9\xd5\x50\xaa\xd3\x34\x3d\x31\xdc\x6b\x55\x62\xc9\x05\xb7\x7c\x32\x4f\xca\xa8\x09\xed\xa0\xc9\x14\x83\x16\xf9\xb5\x26\x4d\x1a\x61\x87\xdf\x94\xc4\xa3\xf1\x95\x69\xac\xd2\x14\xf9\x6e\x1e\x29\xdd\xac\xcd\x59\x1a\xb2\x66\xcd\x14\x53\xfe\x51\x08\x2c\x49\x98\x62\x13\x27\x5b\xf7\xd8\x17\x25\xb2\x97\x46\xbb\xa3\x47\xf6\x64\xbf\x5f\x90\xb5\xc4\x5e\xcc\xd0\xe5\x40\xfb\x24\x4e\xf1\x70\xd8\xb3\xc3\x36\xa3\xb8\xbe\xdd\xb3\xed\x01\xe3\x94\x1d\x58\xb6\xc3\xa4\x5c\xf8\x62\x73\xfa\xbf\x5c\x93\x97\xce\xd5\x68\xec\x5b\xdf\xee\x8e\xc4\x9b\xd6\x1a\xd0\x64\xd4\xa0\x19\x85\xda\xf0\xf6\xa2\x47\xdb\xfe\xc2\xd9\xc6\x06\x34\xbb\xb4\xfc\x38\x34\xa1\xc2\x98\x2a\x72\xaf\x1e\x9f\x9b\x02\x35\x6b\xf9\xeb\xec\xe2\xac\x51\x18\xf7\xcd\xc2\x6b\x30\x64\x57\xa1\x7f\x3b\x8a\x4b\x34\xe4\xd2\xec\x2e\x36\x04\x37\x70\x3d\x5f\xc2\x88\x70\x05\x08\x2a\x9d\xb6\x3e\x3f\x5f\x98\xf0\x90\x15\x49\x65\xc9\x8d\x67\x91\x35\x17\xe4\xbf\xa0\xcc\x45\x58\xdf\xa7\xe8\xc8\x6d\x3b\xde\x7a\xf3\xa5\xc3\x82\x13\x2b\xec\x76\x7f\xd8\x25\x88\xb7\xbb\x2c\x4d\xe3\xb2\x2c\x77\x84\xe5\x61\x77\xbb\x47\xda\x6c\x0f\x3b\xb6\x40\x6b\x35\x2f\x07\x1b\x6e\x04\x3a\x59\x8d\x20\xc9\xfa\x2f\xaf\xc9\xe6\xb1\x5f\xb8\xac\x72\xb8\x7b\x78\x18\x0f\xe7\xde\xdd\x06\x25\x0d\x1a\xc5\x35\xea\xdd\xdd\xc3\xc3\x0a\x3e\xbb\x47\x14\x45\xef\x43\x59\xba\xdb\x9c\xcb\xa6\xa8\xd0\xa2\x21\xd7\xa9\x3e\xdd\x7d\x02\x27\x31\xd7\x66\xc3\xe4\xf5\x03\xcc\xb7\xe7\x31\xc2\x87\x77\x28\x79\x4d\xc6\x16\x38\xd8\x56\xe9\x1c\xfe\x22\x79\x73\x6f\x38\xca\x06\xee\x5a\x94\xcd\x3f\x01\x00\x00\xff\xff\x56\x71\x84\xc4\xa8\x0a\x00\x00"

func onnxvision_ssdYmlBytes() ([]byte, error) {
	return bindataRead(
		_onnxvision_ssdYml,
		"OnnxVision_SSD.yml",
	)
}

func onnxvision_ssdYml() (*asset, error) {
	bytes, err := onnxvision_ssdYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "OnnxVision_SSD.yml", size: 2728, mode: os.FileMode(420), modTime: time.Unix(1594593754, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _torchvision_alexnetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x5d\x6f\xdb\xb8\x12\x7d\xf7\xaf\x18\xc0\x2f\xed\x85\x2d\xc9\xfa\x70\x62\x01\xf7\x02\xbd\x79\xd8\xec\x4b\x16\x28\x8a\x2d\x16\x41\x60\x8c\xa8\x91\xc5\x2d\x45\x0a\x24\x95\xd8\xfd\xf5\x0b\x7e\xd8\x56\xda\x74\xb7\x9b\x87\x58\xe2\xcc\x1c\x0e\xe7\x9c\x19\x4a\xe2\x40\x35\x7c\x52\x9a\xf5\xbf\x73\xc3\x95\xdc\x7f\x10\x74\x7c\x20\x0b\x4b\x70\x36\x50\x1d\x9c\xd4\xa4\x61\x50\x2d\x89\x45\xa7\x71\xa0\x17\xa5\xbf\xd4\x0b\x00\x80\x10\xfd\x9b\x94\x47\x3d\x49\xcb\x07\x82\x25\x5c\x5c\xa0\x53\x1a\x6c\x4f\x31\xd4\xf9\x3f\x93\x76\x7b\xd4\xb0\x49\x8a\x64\xf3\xca\x39\x9a\x80\x29\x69\xac\x46\x2e\xed\x62\xe6\x9d\xc1\xf2\xe2\xc1\x65\xa7\xf4\x80\x36\x3c\x83\xa1\x01\xa5\xe5\xec\x62\x0f\xd6\x05\x53\xd2\x22\x97\xa4\x6b\x58\xc2\xe5\xc5\xc0\x64\xa8\x05\xab\x60\x24\xed\x3c\x43\x76\x30\x6a\x6a\x39\x73\x98\x3e\xd1\x25\x0c\x93\xb0\x7c\x14\x04\xa3\x40\xeb\x1c\x0d\x30\x94\xd0\x10\x98\x91\x18\xef\x38\xb5\xde\x13\x87\x76\x5b\x86\x6a\xb8\x3f\x36\x4e\x35\x68\xe4\xa3\x56\x7f\x12\xb3\x29\x43\x3d\x88\xb5\xba\x56\xa8\xf6\x01\x6b\x36\x4e\x97\x98\xc3\x4f\xc6\x1c\x62\xcc\x38\xb2\x6d\x29\xe8\xdf\x6c\x1a\x43\x2e\x10\x3f\xb7\xed\x3c\xaa\x25\xc3\x34\x1f\xad\x27\xe4\x7f\x1e\xe4\x53\xcf\x4d\x2c\x1f\x37\x80\xa0\x69\x14\x9c\x05\x62\x54\x77\xa5\x1e\x42\x6c\x43\xad\xe3\xcb\x2d\x9f\x35\x36\x4e\xcd\x39\x22\x89\x90\x74\x45\x3c\x90\x24\x8d\x96\x5a\x98\x0c\x97\x07\xb0\x4e\xa5\x89\x4b\x10\x1a\x74\x2c\xaa\x80\xe6\xd7\x9f\xbd\x7a\x67\x5a\xfb\x20\x3c\xab\x6b\x2f\x26\x6a\x83\xc5\x00\x1d\x47\x62\x16\xb8\x1c\x27\x0b\x7c\xc0\x03\x19\x90\x4e\x31\x82\x7f\xbd\x26\x68\x9c\xf4\x5f\xf0\xb4\x02\x9e\x50\x02\x03\x97\x7c\xdd\xa0\x65\x3d\x19\x77\xb4\x62\xcd\x7a\x94\x92\x04\x7c\xfc\xe5\xff\x67\x14\xd5\x81\xe9\x71\x24\x78\x57\xc0\x11\xee\xe1\x08\x9f\xdf\xaf\xe0\xa5\x27\x4d\x70\x0f\x28\x5b\xf8\x0c\xa8\x29\x66\x10\x44\xd8\x10\xa0\x05\x41\x68\x2c\xe4\x79\x99\xf8\x02\x44\xbc\x1e\x9f\x29\xfa\x08\x85\x6d\x4c\x4e\xb9\x42\xa3\x3c\xf8\xce\x7c\xcc\x56\xb0\x79\xf2\xd8\xb6\x27\x39\x3f\x48\x28\xd9\x40\x28\xe1\xbf\xf0\x98\x25\xe5\x6d\xb5\x82\x2c\x29\xab\xad\xff\xc9\xb6\x21\xcc\xd8\x36\xd8\xf3\x7c\xe7\x0c\x79\x5e\x86\x9f\xea\x69\xa1\xa9\x23\x4d\x92\x91\x71\x2d\x74\x7d\xf3\xdd\x83\xa3\x6b\xa6\x14\x5e\xa8\x31\xdc\x92\x7b\x24\xcb\x92\xe4\x4c\xb6\x27\xec\x55\xf3\xaf\xa1\xb7\x76\x34\x75\x9a\xa2\x3e\xf2\xe7\x44\xe9\x43\x8a\x8d\x49\x37\x65\x56\x26\xd5\x6e\x77\xf3\x8d\xd7\x81\xdb\x7e\x6a\x12\xa6\x86\x74\x3c\x79\x8e\xd3\x40\x72\xda\x08\xd5\xa4\x03\x1a\x4b\x3a\x9d\x91\x9f\x06\x8a\x53\x14\x74\x94\x64\x93\xf1\xf4\x0d\x62\x84\xf1\x3b\xb7\x8a\x99\xd4\x58\x6c\x04\xbd\x81\x91\xf4\x76\x10\xcb\xd9\x7a\x12\xd7\x23\xf6\x62\x09\x82\x33\x92\x86\x5e\x29\x7d\x11\x17\x6b\x98\xa4\x26\x63\x35\x77\x44\x2f\x96\x41\x6e\xbe\x70\x57\xdf\xb0\x56\xc7\x79\xd3\x71\x6d\xce\xb2\xb4\xa7\x91\xde\x98\x9e\x6b\x6f\xa8\x83\x3e\x62\x1b\x2f\x61\xd6\x98\xe7\x5c\x66\x58\xd1\xed\x55\xf7\x3a\x97\x99\xfe\xa3\xcb\x88\x6e\x16\x5b\xd2\x9e\x6d\x9f\xc2\x75\xe9\x32\x34\x00\x48\xd0\x40\xd2\xee\x43\x2e\x9d\x50\x68\x8b\x7c\x66\xf7\xc8\x7b\x81\x27\x37\x79\xb3\x99\x41\xe0\x49\x4d\xb6\x86\xbb\xfb\xcf\xb3\x55\xa6\x84\xd2\x7b\x77\xc8\xda\x35\xd3\xcc\xd2\xf2\x81\xa4\xab\xbd\xa9\xe1\xb1\x58\x81\x97\x66\x9e\x97\x4f\x33\x1f\xa7\xef\x1a\x1e\x37\x79\x91\x6c\x6f\xaa\x15\x6c\x36\xdb\x24\xbf\x75\x5d\x91\x15\x49\x55\x64\x4f\xb0\xfc\x81\xf8\xff\x03\x79\x55\xcd\x90\x0c\x43\x41\x35\x3c\x56\xb7\x49\xb1\xab\x56\x50\xdd\x24\x9b\x3c\xf3\xbf\xc5\x4d\xf5\xe4\x4b\xfd\xaa\x4d\x92\xd8\x26\x11\x49\x4d\x76\x9c\xec\x99\x4d\x3f\x96\x5c\x09\x23\x23\xc1\xea\x8d\xa1\x6e\x4c\xa0\x31\xbc\x8b\xc3\x2f\x46\xe1\x5b\x64\x86\xd0\x2b\x17\x8b\x37\xf9\x8c\x5e\x02\x9b\x28\x96\x19\x9d\x97\x53\xfe\x98\xd6\xbf\x27\x75\xd4\xaa\xc1\x86\x0b\x6e\x39\x99\xef\xa9\xed\x08\xed\xa4\xc9\xec\x27\x2d\x6a\xdf\x6c\x75\x9a\x9a\x22\xc1\x01\xbf\x2a\x89\x2f\xc6\xf7\xb0\xb1\x4a\x53\xe2\x2f\x19\xdf\x80\xe6\x24\x0d\x59\x93\x7a\x0d\x4a\xb2\x71\x21\xb1\x47\xfb\x3d\x32\xeb\x89\x7d\x31\xd3\x50\x43\xd9\xe6\x45\xd9\x54\xb7\x45\x81\x0c\xcb\x72\x97\xdf\x66\xdb\x0a\x37\xb7\x59\xdb\x14\xd9\x66\x8b\x0b\xdf\x2f\x4e\xc2\xe7\x7b\xfa\x7c\x47\x1d\x34\x8e\xbd\x1f\x7a\x2f\xc4\x0f\xbd\x35\xa0\xc9\xa8\x49\x33\x0a\x75\xf0\xf6\xfd\x88\xb6\xaf\x2f\x13\xe3\x1f\x4f\x11\x47\xce\xec\xd6\x9c\x4f\x93\xfd\x79\x14\x39\xbb\xdf\x84\x9b\x3d\x6a\xd6\xf3\xe7\xd9\xf5\xdd\xa1\x30\xee\xcb\x89\x77\x60\xc8\xae\xc2\x28\x77\xa4\xba\x5b\xce\x15\x35\x5c\xaf\xee\xc1\x8d\x7f\x09\x11\x61\xce\x6b\x4f\xb3\xfc\xe7\x87\x0c\x0b\x1e\xb2\x25\xa9\x2c\xb9\xe7\x59\x64\xc7\x05\xf9\xef\x38\x73\x16\xdc\xf7\x75\x7a\xe1\xb6\x8f\x17\xe3\x7c\xeb\xb0\xe1\x95\x9a\x4d\x87\xe5\xae\xdc\x95\x6d\xd9\x6c\x58\x5e\x62\x46\x54\xd1\xed\xcd\x66\x57\x64\x45\x59\xb4\xb4\x40\x6b\x35\x6f\x26\x1b\x2e\x14\x3a\x5a\x8d\x20\xc9\xfa\xef\xbf\xab\xcd\x63\x7f\xe1\xb2\xad\xe1\xee\xe1\x21\x1e\xce\xbd\xbb\x04\x25\x4d\x1a\xc5\x25\xea\xdd\xdd\xc3\xc3\x0a\x3e\xba\x7f\x49\x92\xbc\x0f\x0d\xe6\x2e\x7c\x2e\x0f\xfb\x16\x2d\x1a\xb2\x35\xfc\xea\x24\x16\xbe\x69\xe3\xda\xe5\x2b\xd0\x4f\xd9\x18\xe0\xa3\x07\x94\xbc\x23\x63\xf7\x38\xd9\x5e\xe9\x1a\xfe\x20\xb9\xbe\x37\x1c\xe5\x01\xee\x7a\x94\x87\xbf\x02\x00\x00\xff\xff\x9e\xb9\x24\x78\x32\x0b\x00\x00"

func torchvision_alexnetYmlBytes() ([]byte, error) {
	return bindataRead(
		_torchvision_alexnetYml,
		"TorchVision_AlexNet.yml",
	)
}

func torchvision_alexnetYml() (*asset, error) {
	bytes, err := torchvision_alexnetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "TorchVision_AlexNet.yml", size: 2866, mode: os.FileMode(420), modTime: time.Unix(1594496768, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"OnnxVision_Mask_RCNN_R_50_FPN.yml": onnxvision_mask_rcnn_r_50_fpnYml,
	"OnnxVision_SSD.yml": onnxvision_ssdYml,
	"TorchVision_AlexNet.yml": torchvision_alexnetYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"OnnxVision_Mask_RCNN_R_50_FPN.yml": &bintree{onnxvision_mask_rcnn_r_50_fpnYml, map[string]*bintree{}},
	"OnnxVision_SSD.yml": &bintree{onnxvision_ssdYml, map[string]*bintree{}},
	"TorchVision_AlexNet.yml": &bintree{torchvision_alexnetYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

