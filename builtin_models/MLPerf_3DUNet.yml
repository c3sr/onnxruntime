name: MLPerf_3DUNet # name of your model
framework:
    name: Onnxruntime # framework for the model
    version: 1.6.0 # framework version constraint
version: 1.0 # version information in semantic version format
description: >
  MLPerf_3DUNet.
references:
  - https://github.com/mlcommons/inference/tree/master/vision/medical_imaging/3d-unet-brats19
  - https://zenodo.org/record/3928973
# license of the model
license: Apache License, Version 2.0 # license of the model
# inputs to the model
inputs:
    - type: general
output:
    type: text
    # a description of the output parameter
    description: the serialized outputs
model: # specifies model graph and weights resources
    graph_path: https://s3.amazonaws.com/store.carml.org/models/onnxruntime/3dunet.onnx
    is_archive:
        false # if set, then the base_url is a url to an archive
        # the graph_path and weights_path then denote the
        # file names of the graph and weights within the archive
    graph_checksum: b163649a0656539d609ef3a6a5ddd000
before_preprocess: |
  # coding=utf-8
  # Copyright (c) 2020 NVIDIA CORPORATION. All rights reserved.
  # Copyright 2020 Division of Medical Image Computing, German Cancer Research Center (DKFZ), Heidelberg, Germany
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  
  import os
  import pickle
  
  class BraTS_2019_QSL():
    def __init__(self, preprocessed_data_dir, perf_count):
      self.preprocessed_data_dir = preprocessed_data_dir
      with open(os.path.join(self.preprocessed_data_dir, "preprocessed_files.pkl"), "rb") as f:
        self.preprocess_files = pickle.load(f)

        self.count = len(self.preprocess_files)
        self.perf_count = perf_count if perf_count is not None else self.count

  data_dir = os.path.realpath(os.getenv('DATA_DIR'))
  qsl = BraTS_2019_QSL(data_dir, None)
  def before_preprocess():
    return qsl.count
preprocess: |
  def preprocess(ctx, data):
    import numpy as np
    file_name = qsl.preprocess_files[int(data)]
    f = open(os.path.join(qsl.preprocessed_data_dir, "{:}.pkl".format(file_name)), "rb")
    print(data)
    res = pickle.load(f)[0]
    f.close()
    return res
postprocess: |
  def postprocess(ctx, data):
    import numpy as np
    import json
    print('HERE')
    return [json.dumps(data[0].squeeze(0).astype(np.float16).tolist())]
attributes: # extra network attributes
    kind: CNN # the kind of neural network (CNN, RNN, ...)
    manifest_author: Yen-Hsiang Chang

